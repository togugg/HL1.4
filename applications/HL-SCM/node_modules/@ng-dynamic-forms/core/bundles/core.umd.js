/*!
@ng-dynamic-forms/core 7.0.1 2018-11-03 16:31 UTC
Copyright (c) 2016-2018, Udo Sch√∂fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global.ngDF = global.ngDF || {}, global.ngDF.core = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,i0,i1,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === "function";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumber(value) {
        return typeof value === "number";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return typeof value === "object" && value !== null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isString(value) {
        return typeof value === "string";
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var  /**
     * @abstract
     */
    DynamicFormControlComponent = /** @class */ (function () {
        function DynamicFormControlComponent(layoutService, validationService) {
            this.layoutService = layoutService;
            this.validationService = validationService;
            this._hasFocus = false;
        }
        Object.defineProperty(DynamicFormControlComponent.prototype, "control", {
            get: /**
             * @return {?}
             */
            function () {
                return (/** @type {?} */ (this.group.get(this.model.id)));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "elementId", {
            get: /**
             * @return {?}
             */
            function () {
                return this.layoutService.getElementId(this.model);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "errorMessages", {
            get: /**
             * @return {?}
             */
            function () {
                return this.validationService.createErrorMessages(this.control, this.model);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "hasFocus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hasFocus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "isInvalid", {
            get: /**
             * @return {?}
             */
            function () {
                return this.control.invalid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "isValid", {
            get: /**
             * @return {?}
             */
            function () {
                return this.control.valid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlComponent.prototype, "showErrorMessages", {
            get: /**
             * @return {?}
             */
            function () {
                return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} context
         * @param {?} place
         * @param {?=} model
         * @return {?}
         */
        DynamicFormControlComponent.prototype.getClass = /**
         * @param {?} context
         * @param {?} place
         * @param {?=} model
         * @return {?}
         */
        function (context, place, model) {
            if (model === void 0) { model = this.model; }
            /** @type {?} */
            var controlLayout = (this.layout && this.layout[model.id]) || (/** @type {?} */ (model.layout));
            return this.layoutService.getClass(controlLayout, context, place);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlComponent.prototype.onBlur = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event instanceof Event) {
                $event.stopPropagation();
            }
            this._hasFocus = false;
            this.blur.emit($event);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlComponent.prototype.onChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event instanceof Event) {
                $event.stopPropagation();
            }
            this.change.emit($event);
        };
        /**
         * @param {?} $event
         * @param {?} model
         * @return {?}
         */
        DynamicFormControlComponent.prototype.onEmbeddedCheckboxChange = /**
         * @param {?} $event
         * @param {?} model
         * @return {?}
         */
        function ($event, model) {
            this.onChange($event);
            model.valueUpdates.next(((/** @type {?} */ ($event.target))).checked);
        };
        /**
         * @param {?} $event
         * @param {?=} type
         * @param {?=} bypass
         * @return {?}
         */
        DynamicFormControlComponent.prototype.onCustomEvent = /**
         * @param {?} $event
         * @param {?=} type
         * @param {?=} bypass
         * @return {?}
         */
        function ($event, type, bypass) {
            if (type === void 0) { type = null; }
            if (bypass === void 0) { bypass = false; }
            /** @type {?} */
            var emitter = (/** @type {?} */ (this.customEvent));
            if (bypass) {
                emitter.emit($event);
            }
            else if (isString(type)) {
                emitter.emit({ customEvent: $event, customEventType: type });
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlComponent.prototype.onFocus = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event instanceof Event) {
                $event.stopPropagation();
            }
            this._hasFocus = true;
            this.focus.emit($event);
        };
        return DynamicFormControlComponent;
    }());

    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     */
    var  /**
     * @abstract
     */
    DynamicFormArrayComponent = /** @class */ (function (_super) {
        __extends(DynamicFormArrayComponent, _super);
        function DynamicFormArrayComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DynamicFormArrayComponent.prototype, "startTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return this.layoutService.getStartTemplate(this.model, this.templates);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormArrayComponent.prototype, "endTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return this.layoutService.getEndTemplate(this.model, this.templates);
            },
            enumerable: true,
            configurable: true
        });
        return DynamicFormArrayComponent;
    }(DynamicFormControlComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var DynamicFormControlEventType = {
        Blur: "blur", Change: "change", Custom: "custom", Focus: "focus",
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    function isDynamicFormControlEvent($event) {
        return isObject($event) && $event.hasOwnProperty("$event");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var  /**
     * @abstract
     */
    DynamicFormComponent = /** @class */ (function () {
        function DynamicFormComponent(formService, layoutService) {
            this.formService = formService;
            this.layoutService = layoutService;
        }
        /**
         * @param {?} _index
         * @param {?} model
         * @return {?}
         */
        DynamicFormComponent.prototype.trackByFn = /**
         * @param {?} _index
         * @param {?} model
         * @return {?}
         */
        function (_index, model) {
            return model.id;
        };
        /**
         * @param {?} model
         * @param {?} context
         * @param {?} place
         * @return {?}
         */
        DynamicFormComponent.prototype.getClass = /**
         * @param {?} model
         * @param {?} context
         * @param {?} place
         * @return {?}
         */
        function (model, context, place) {
            /** @type {?} */
            var controlLayout = this.layoutService.findById(model.id, this.formLayout) || (/** @type {?} */ (model.layout));
            return this.layoutService.getClass(controlLayout, context, place);
        };
        /**
         * @param {?} $event
         * @param {?} type
         * @return {?}
         */
        DynamicFormComponent.prototype.onEvent = /**
         * @param {?} $event
         * @param {?} type
         * @return {?}
         */
        function ($event, type) {
            switch (type) {
                case DynamicFormControlEventType.Blur:
                    this.blur.emit($event);
                    break;
                case DynamicFormControlEventType.Change:
                    this.change.emit($event);
                    break;
                case DynamicFormControlEventType.Focus:
                    this.focus.emit($event);
                    break;
                case DynamicFormControlEventType.Custom:
                    this.customEvent.emit($event);
                    break;
            }
        };
        return DynamicFormComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends$1(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isFunction$1(x) {
        return typeof x === 'function';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var _enable_super_gross_mode_that_will_cause_bad_things = false;
    var config = {
        Promise: undefined,
        set useDeprecatedSynchronousErrorHandling(value) {
            if (value) {
                var error = /*@__PURE__*/ new Error();
                /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
            }
            else if (_enable_super_gross_mode_that_will_cause_bad_things) {
                /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
            }
            _enable_super_gross_mode_that_will_cause_bad_things = value;
        },
        get useDeprecatedSynchronousErrorHandling() {
            return _enable_super_gross_mode_that_will_cause_bad_things;
        },
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function hostReportError(err) {
        setTimeout(function () { throw err; });
    }

    /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
    var empty = {
        closed: true,
        next: function (value) { },
        error: function (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        },
        complete: function () { }
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isObject$1(x) {
        return x != null && typeof x === 'object';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var errorObject = { e: {} };

    /** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        }
        catch (e) {
            errorObject.e = e;
            return errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var UnsubscriptionError = UnsubscriptionErrorImpl;

    /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
    var Subscription = /*@__PURE__*/ (function () {
        function Subscription(unsubscribe) {
            this.closed = false;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            var index = -1;
            var len = _parents ? _parents.length : 0;
            while (_parent) {
                _parent.remove(this);
                _parent = ++index < len && _parents[index] || null;
            }
            if (isFunction$1(_unsubscribe)) {
                var trial = tryCatch(_unsubscribe).call(this);
                if (trial === errorObject) {
                    hasErrors = true;
                    errors = errors || (errorObject.e instanceof UnsubscriptionError ?
                        flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
                }
            }
            if (isArray(_subscriptions)) {
                index = -1;
                len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject$1(sub)) {
                        var trial = tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject.e;
                            if (err instanceof UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError(errors);
            }
        };
        Subscription.prototype.add = function (teardown) {
            if (!teardown || (teardown === Subscription.EMPTY)) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var subscription = teardown;
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    }
                    else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    }
                    else if (typeof subscription._addParent !== 'function') {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            var subscriptions = this._subscriptions || (this._subscriptions = []);
            subscriptions.push(subscription);
            subscription._addParent(this);
            return subscription;
        };
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.prototype._addParent = function (parent) {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            if (!_parent || _parent === parent) {
                this._parent = parent;
            }
            else if (!_parents) {
                this._parents = [parent];
            }
            else if (_parents.indexOf(parent) === -1) {
                _parents.push(parent);
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var rxSubscriber = typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();

    /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
    var Subscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(Subscriber, _super);
        function Subscriber(destinationOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this.syncErrorValue = null;
            _this.syncErrorThrown = false;
            _this.syncErrorThrowable = false;
            _this.isStopped = false;
            _this._parentSubscription = null;
            switch (arguments.length) {
                case 0:
                    _this.destination = empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        _this.destination = empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                            _this.destination = destinationOrNext;
                            destinationOrNext.add(_this);
                        }
                        else {
                            _this.syncErrorThrowable = true;
                            _this.destination = new SafeSubscriber(_this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    _this.syncErrorThrowable = true;
                    _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                    break;
            }
            return _this;
        }
        Subscriber.prototype[rxSubscriber] = function () { return this; };
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            this._parent = null;
            this._parents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parent = _parent;
            this._parents = _parents;
            this._parentSubscription = null;
            return this;
        };
        return Subscriber;
    }(Subscription));
    var SafeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this._parentSubscriber = _parentSubscriber;
            var next;
            var context = _this;
            if (isFunction$1(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== empty) {
                    context = Object.create(observerOrNext);
                    if (isFunction$1(context.unsubscribe)) {
                        _this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = _this.unsubscribe.bind(_this);
                }
            }
            _this._context = context;
            _this._next = next;
            _this._error = error;
            _this._complete = complete;
            return _this;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
                if (this._error) {
                    if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    if (useDeprecatedSynchronousErrorHandling) {
                        throw err;
                    }
                    hostReportError(err);
                }
                else {
                    if (useDeprecatedSynchronousErrorHandling) {
                        _parentSubscriber.syncErrorValue = err;
                        _parentSubscriber.syncErrorThrown = true;
                    }
                    else {
                        hostReportError(err);
                    }
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () { return _this._complete.call(_this._context); };
                    if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                if (config.useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                else {
                    hostReportError(err);
                }
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            if (!config.useDeprecatedSynchronousErrorHandling) {
                throw new Error('bad call');
            }
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    parent.syncErrorValue = err;
                    parent.syncErrorThrown = true;
                    return true;
                }
                else {
                    hostReportError(err);
                    return true;
                }
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
    function canReportError(observer) {
        while (observer) {
            var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
            if (closed_1 || isStopped) {
                return false;
            }
            else if (destination && destination instanceof Subscriber) {
                observer = destination;
            }
            else {
                observer = null;
            }
        }
        return true;
    }

    /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber]) {
                return nextOrObserver[rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber(empty);
        }
        return new Subscriber(nextOrObserver, error, complete);
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function noop() { }

    /** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
    function pipeFromArray(fns) {
        if (!fns) {
            return noop;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
    var Observable = /*@__PURE__*/ (function () {
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable$$1 = new Observable();
            observable$$1.source = this;
            observable$$1.operator = operator;
            return observable$$1;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            }
            else {
                sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                    this._subscribe(sink) :
                    this._trySubscribe(sink));
            }
            if (config.useDeprecatedSynchronousErrorHandling) {
                if (sink.syncErrorThrowable) {
                    sink.syncErrorThrowable = false;
                    if (sink.syncErrorThrown) {
                        throw sink.syncErrorValue;
                    }
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    sink.syncErrorThrown = true;
                    sink.syncErrorValue = err;
                }
                if (canReportError(sink)) {
                    sink.error(err);
                }
                else {
                    console.warn(err);
                }
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscription;
                subscription = _this.subscribe(function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            if (operations.length === 0) {
                return this;
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
            promiseCtor = Promise;
        }
        if (!promiseCtor) {
            throw new Error('no Promise impl found');
        }
        return promiseCtor;
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var SubjectSubscription = /*@__PURE__*/ (function (_super) {
        __extends$1(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            var _this = _super.call(this) || this;
            _this.subject = subject;
            _this.subscriber = subscriber;
            _this.closed = false;
            return _this;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
    var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            return _this;
        }
        return SubjectSubscriber;
    }(Subscriber));
    var Subject = /*@__PURE__*/ (function (_super) {
        __extends$1(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.observers = [];
            _this.closed = false;
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype[rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = /*@__PURE__*/ (function (_super) {
        __extends$1(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function refCount() {
        return function refCountOperatorFunction(source) {
            return source.lift(new RefCountOperator(source));
        };
    }
    var RefCountOperator = /*@__PURE__*/ (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
    var ConnectableObservable = /*@__PURE__*/ (function (_super) {
        __extends$1(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._refCount = 0;
            _this._isComplete = false;
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
                else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));
    var connectableProto = ConnectableObservable.prototype;
    var connectableObservableDescriptor = {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
    var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(SubjectSubscriber));
    var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
        __extends$1(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount$$1 = connectable._refCount;
            if (refCount$$1 <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount$$1 - 1;
            if (refCount$$1 > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
    var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(GroupBySubscriber, _super);
        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.elementSelector = elementSelector;
            _this.durationSelector = durationSelector;
            _this.subjectSelector = subjectSelector;
            _this.groups = null;
            _this.attemptedToUnsubscribe = false;
            _this.count = 0;
            return _this;
        }
        GroupBySubscriber.prototype._next = function (value) {
            var key;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                this.error(err);
                return;
            }
            this._group(value, key);
        };
        GroupBySubscriber.prototype._group = function (value, key) {
            var groups = this.groups;
            if (!groups) {
                groups = this.groups = new Map();
            }
            var group = groups.get(key);
            var element;
            if (this.elementSelector) {
                try {
                    element = this.elementSelector(value);
                }
                catch (err) {
                    this.error(err);
                }
            }
            else {
                element = value;
            }
            if (!group) {
                group = (this.subjectSelector ? this.subjectSelector() : new Subject());
                groups.set(key, group);
                var groupedObservable = new GroupedObservable(key, group, this);
                this.destination.next(groupedObservable);
                if (this.durationSelector) {
                    var duration = void 0;
                    try {
                        duration = this.durationSelector(new GroupedObservable(key, group));
                    }
                    catch (err) {
                        this.error(err);
                        return;
                    }
                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
                }
            }
            if (!group.closed) {
                group.next(element);
            }
        };
        GroupBySubscriber.prototype._error = function (err) {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.error(err);
                });
                groups.clear();
            }
            this.destination.error(err);
        };
        GroupBySubscriber.prototype._complete = function () {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.complete();
                });
                groups.clear();
            }
            this.destination.complete();
        };
        GroupBySubscriber.prototype.removeGroup = function (key) {
            this.groups.delete(key);
        };
        GroupBySubscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.attemptedToUnsubscribe = true;
                if (this.count === 0) {
                    _super.prototype.unsubscribe.call(this);
                }
            }
        };
        return GroupBySubscriber;
    }(Subscriber));
    var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(GroupDurationSubscriber, _super);
        function GroupDurationSubscriber(key, group, parent) {
            var _this = _super.call(this, group) || this;
            _this.key = key;
            _this.group = group;
            _this.parent = parent;
            return _this;
        }
        GroupDurationSubscriber.prototype._next = function (value) {
            this.complete();
        };
        GroupDurationSubscriber.prototype._unsubscribe = function () {
            var _a = this, parent = _a.parent, key = _a.key;
            this.key = this.parent = null;
            if (parent) {
                parent.removeGroup(key);
            }
        };
        return GroupDurationSubscriber;
    }(Subscriber));
    var GroupedObservable = /*@__PURE__*/ (function (_super) {
        __extends$1(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            var _this = _super.call(this) || this;
            _this.key = key;
            _this.groupSubject = groupSubject;
            _this.refCountSubscription = refCountSubscription;
            return _this;
        }
        GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription();
            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable));
    var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
        __extends$1(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            parent.count++;
            return _this;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
    var BehaviorSubject = /*@__PURE__*/ (function (_super) {
        __extends$1(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject));

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var Action = /*@__PURE__*/ (function (_super) {
        __extends$1(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
    var AsyncAction = /*@__PURE__*/ (function (_super) {
        __extends$1(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            clearInterval(id);
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
        };
        return AsyncAction;
    }(Action));

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var QueueAction = /*@__PURE__*/ (function (_super) {
        __extends$1(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction));

    var Scheduler = /*@__PURE__*/ (function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = function () { return Date.now(); };
        return Scheduler;
    }());

    /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
    var AsyncScheduler = /*@__PURE__*/ (function (_super) {
        __extends$1(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            var _this = _super.call(this, SchedulerAction, function () {
                if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                    return AsyncScheduler.delegate.now();
                }
                else {
                    return now();
                }
            }) || this;
            _this.actions = [];
            _this.active = false;
            _this.scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
                return AsyncScheduler.delegate.schedule(work, delay, state);
            }
            else {
                return _super.prototype.schedule.call(this, work, delay, state);
            }
        };
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift());
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var QueueScheduler = /*@__PURE__*/ (function (_super) {
        __extends$1(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
    var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
    function empty$1(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }
    function emptyScheduled(scheduler) {
        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var subscribeToArray = function (array) {
        return function (subscriber) {
            for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            if (!subscriber.closed) {
                subscriber.complete();
            }
        };
    };

    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
    function fromArray(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToArray(input));
        }
        else {
            return new Observable(function (subscriber) {
                var sub = new Subscription();
                var i = 0;
                sub.add(scheduler.schedule(function () {
                    if (i === input.length) {
                        subscriber.complete();
                        return;
                    }
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        sub.add(this.schedule());
                    }
                }));
                return sub;
            });
        }
    }

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function scalar(value) {
        var result = new Observable(function (subscriber) {
            subscriber.next(value);
            subscriber.complete();
        });
        result._isScalar = true;
        result.value = value;
        return result;
    }

    /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */
    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = args[args.length - 1];
        if (isScheduler(scheduler)) {
            args.pop();
        }
        else {
            scheduler = undefined;
        }
        switch (args.length) {
            case 0:
                return empty$1(scheduler);
            case 1:
                return scheduler ? fromArray(args, scheduler) : scalar(args[0]);
            default:
                return fromArray(args, scheduler);
        }
    }

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function throwError(error, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) { return subscriber.error(error); });
        }
        else {
            return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
        }
    }
    function dispatch(_a) {
        var error = _a.error, subscriber = _a.subscriber;
        subscriber.error(error);
    }

    /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
    var Notification = /*@__PURE__*/ (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return of(this.value);
                case 'E':
                    return throwError(this.error);
                case 'C':
                    return empty$1();
            }
            throw new Error('unexpected notification kind value');
        };
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return Notification.undefinedValueNotification;
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());

    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
    var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            var _this = _super.call(this, destination) || this;
            _this.scheduler = scheduler;
            _this.delay = delay;
            return _this;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification.createError(err));
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification.createComplete());
            this.unsubscribe();
        };
        return ObserveOnSubscriber;
    }(Subscriber));
    var ObserveOnMessage = /*@__PURE__*/ (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());

    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
    var ReplaySubject = /*@__PURE__*/ (function (_super) {
        __extends$1(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) {
                bufferSize = Number.POSITIVE_INFINITY;
            }
            if (windowTime === void 0) {
                windowTime = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this) || this;
            _this.scheduler = scheduler;
            _this._events = [];
            _this._infiniteTimeWindow = false;
            _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            _this._windowTime = windowTime < 1 ? 1 : windowTime;
            if (windowTime === Number.POSITIVE_INFINITY) {
                _this._infiniteTimeWindow = true;
                _this.next = _this.nextInfiniteTimeWindow;
            }
            else {
                _this.next = _this.nextTimeWindow;
            }
            return _this;
        }
        ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
                _events.shift();
            }
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype.nextTimeWindow = function (value) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;
            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.isStopped || this.hasError) {
                subscription = Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
            }
            if (_infiniteTimeWindow) {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i]);
                }
            }
            else {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i].value);
                }
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            }
            else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            while (spliceCount < eventsCount) {
                if ((now - _events[spliceCount].time) < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject));
    var ReplayEvent = /*@__PURE__*/ (function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }());

    /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
    var AsyncSubject = /*@__PURE__*/ (function (_super) {
        __extends$1(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.value = null;
            _this.hasNext = false;
            _this.hasCompleted = false;
            return _this;
        }
        AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.error = function (error) {
            if (!this.hasCompleted) {
                _super.prototype.error.call(this, error);
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var nextHandle = 1;
    var tasksByHandle = {};
    function runIfPresent(handle) {
        var cb = tasksByHandle[handle];
        if (cb) {
            cb();
        }
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            tasksByHandle[handle] = cb;
            Promise.resolve().then(function () { return runIfPresent(handle); });
            return handle;
        },
        clearImmediate: function (handle) {
            delete tasksByHandle[handle];
        },
    };

    /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
    var AsapAction = /*@__PURE__*/ (function (_super) {
        __extends$1(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                Immediate.clearImmediate(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AsapScheduler = /*@__PURE__*/ (function (_super) {
        __extends$1(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
    var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);

    /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
        __extends$1(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                cancelAnimationFrame(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
        __extends$1(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
    var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);

    /** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
        __extends$1(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(SchedulerAction, maxFrames) {
            if (SchedulerAction === void 0) {
                SchedulerAction = VirtualAction;
            }
            if (maxFrames === void 0) {
                maxFrames = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error, action;
            while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            }
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler));
    var VirtualAction = /*@__PURE__*/ (function (_super) {
        __extends$1(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) {
                index = scheduler.index += 1;
            }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (!this.id) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function isObservable(obj) {
        return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function EmptyErrorImpl() {
        Error.call(this);
        this.message = 'no elements in sequence';
        this.name = 'EmptyError';
        return this;
    }
    EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var EmptyError = EmptyErrorImpl;

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function map(project, thisArg) {
        return function mapOperation(source) {
            if (typeof project !== 'function') {
                throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
            }
            return source.lift(new MapOperator(project, thisArg));
        };
    }
    var MapOperator = /*@__PURE__*/ (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.count = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var OuterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(OuterSubscriber, _super);
        function OuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var InnerSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.outerValue = outerValue;
            _this.outerIndex = outerIndex;
            _this.index = 0;
            return _this;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
    var subscribeToPromise = function (promise) {
        return function (subscriber) {
            promise.then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, hostReportError);
            return subscriber;
        };
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = /*@__PURE__*/ getSymbolIterator();

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
    var subscribeToIterable = function (iterable) {
        return function (subscriber) {
            var iterator$$1 = iterable[iterator]();
            do {
                var item = iterator$$1.next();
                if (item.done) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(item.value);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
            if (typeof iterator$$1.return === 'function') {
                subscriber.add(function () {
                    if (iterator$$1.return) {
                        iterator$$1.return();
                    }
                });
            }
            return subscriber;
        };
    };

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
    var subscribeToObservable = function (obj) {
        return function (subscriber) {
            var obs = obj[observable]();
            if (typeof obs.subscribe !== 'function') {
                throw new TypeError('Provided object does not correctly implement Symbol.observable');
            }
            else {
                return obs.subscribe(subscriber);
            }
        };
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }

    /** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
    var subscribeTo = function (result) {
        if (result instanceof Observable) {
            return function (subscriber) {
                if (result._isScalar) {
                    subscriber.next(result.value);
                    subscriber.complete();
                    return undefined;
                }
                else {
                    return result.subscribe(subscriber);
                }
            };
        }
        else if (result && typeof result[observable] === 'function') {
            return subscribeToObservable(result);
        }
        else if (isArrayLike(result)) {
            return subscribeToArray(result);
        }
        else if (isPromise(result)) {
            return subscribeToPromise(result);
        }
        else if (result && typeof result[iterator] === 'function') {
            return subscribeToIterable(result);
        }
        else {
            var value = isObject$1(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected."
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            throw new TypeError(msg);
        }
    };

    /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
        if (destination === void 0) {
            destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        }
        if (destination.closed) {
            return;
        }
        return subscribeTo(result)(destination);
    }

    /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
    var NONE = {};
    var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, resultSelector) {
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.active = 0;
            _this.values = [];
            _this.observables = [];
            return _this;
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(NONE);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult(this, observable, observable, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond
                ? 0
                : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.resultSelector) {
                    this._tryResultSelector(values);
                }
                else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
            var result;
            try {
                result = this.resultSelector.apply(this, values);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
    var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, ish, value, index, innerSubscriber);
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */
    var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources) {
            var _this = _super.call(this, destination) || this;
            _this.sources = sources;
            _this.completed = 0;
            _this.haveValues = 0;
            var len = sources.length;
            _this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult(_this, source, null, i);
                if (innerSubscription) {
                    _this.add(innerSubscription);
                }
            }
            return _this;
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                destination.next(values);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
    function isNumeric(val) {
        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
    }

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
    var NEVER = /*@__PURE__*/ new Observable(noop);

    /** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RaceSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasFirst = false;
            _this.observables = [];
            _this.subscriptions = [];
            return _this;
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                for (var i = 0; i < len && !this.hasFirst; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult(this, observable, observable, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                    }
                    this.add(subscription);
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
    var ZipSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ZipSubscriber, _super);
        function ZipSubscriber(destination, resultSelector, values) {
            if (values === void 0) {
                values = Object.create(null);
            }
            var _this = _super.call(this, destination) || this;
            _this.iterators = [];
            _this.active = 0;
            _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
            _this.values = values;
            return _this;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            if (isArray(value)) {
                iterators.push(new StaticArrayIterator(value));
            }
            else if (typeof value[iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator]()));
            }
            else {
                iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            this.unsubscribe();
            if (len === 0) {
                this.destination.complete();
                return;
            }
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (iterator$$1.stillUnsubscribed) {
                    var destination = this.destination;
                    destination.add(iterator$$1.subscribe(iterator$$1, i));
                }
                else {
                    this.active--;
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                var result = iterator$$1.next();
                if (iterator$$1.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.resultSelector) {
                this._tryresultSelector(args);
            }
            else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryresultSelector = function (args) {
            var result;
            try {
                result = this.resultSelector.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber));
    var StaticIterator = /*@__PURE__*/ (function () {
        function StaticIterator(iterator$$1) {
            this.iterator = iterator$$1;
            this.nextResult = iterator$$1.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return nextResult && nextResult.done;
        };
        return StaticIterator;
    }());
    var StaticArrayIterator = /*@__PURE__*/ (function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }());
    var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
        __extends$1(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            _this.observable = observable;
            _this.stillUnsubscribed = true;
            _this.buffer = [];
            _this.isComplete = false;
            return _this;
        }
        ZipBufferIterator.prototype[iterator] = function () {
            return this;
        };
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            }
            else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            }
            else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function (value, index) {
            return subscribeToResult(this, this.observable, this, index);
        };
        return ZipBufferIterator;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var METADATA_KEY_SERIALIZABLE = "SERIALIZABLE";
    /**
     * @param {?=} name
     * @return {?}
     */
    function serializable(name) {
        return function (target, key) {
            Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, { key: key, name: name || key }, target, key);
        };
    }
    /**
     * @param {?} target
     * @return {?}
     */
    function getSerializables(target) {
        /** @type {?} */
        var serializables = [];
        for (var key in target) {
            /** @type {?} */
            var metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);
            if (metadata) {
                serializables.push(metadata);
            }
        }
        return serializables;
    }
    /**
     * @param {?} target
     * @param {?=} prototype
     * @return {?}
     */
    function serialize(target, prototype) {
        return getSerializables(prototype || target).reduce(function (prev, prop) {
            prev[prop.name] = target[prop.key];
            return prev;
        }, {});
    }

    var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$1 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     */
    var DynamicFormControlModel = /** @class */ (function () {
        function DynamicFormControlModel(config$$1, layout) {
            if (layout === void 0) { layout = null; }
            var _this = this;
            this.parent = null;
            this.asyncValidators = config$$1.asyncValidators || null;
            this.errorMessages = config$$1.errorMessages || null;
            this.hidden = isBoolean(config$$1.hidden) ? config$$1.hidden : false;
            this.id = config$$1.id;
            this.label = config$$1.label || null;
            this.labelTooltip = config$$1.labelTooltip || null;
            this.controlTooltip = config$$1.controlTooltip || null;
            this.layout = layout;
            this.name = config$$1.name || config$$1.id;
            this.relation = Array.isArray(config$$1.relation) ? config$$1.relation : [];
            this.updateOn = isString(config$$1.updateOn) ? config$$1.updateOn : null;
            this.validators = config$$1.validators || null;
            this.disabled = isBoolean(config$$1.disabled) ? config$$1.disabled : false;
            this.disabledUpdates = new Subject();
            this.disabledUpdates.subscribe(function (disabled) { return _this.disabled = disabled; });
        }
        Object.defineProperty(DynamicFormControlModel.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlModel.prototype, "hasErrorMessages", {
            get: /**
             * @return {?}
             */
            function () {
                return isObject(this.errorMessages);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicFormControlModel.prototype.toJSON = /**
         * @return {?}
         */
        function () {
            return serialize(this);
        };
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "asyncValidators", void 0);
        __decorate$1([
            serializable("disabled"),
            __metadata$1("design:type", Boolean)
        ], DynamicFormControlModel.prototype, "_disabled", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "errorMessages", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Boolean)
        ], DynamicFormControlModel.prototype, "hidden", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", String)
        ], DynamicFormControlModel.prototype, "id", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "label", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "labelTooltip", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "controlTooltip", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "layout", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", String)
        ], DynamicFormControlModel.prototype, "name", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Array)
        ], DynamicFormControlModel.prototype, "relation", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "updateOn", void 0);
        __decorate$1([
            serializable(),
            __metadata$1("design:type", Object)
        ], DynamicFormControlModel.prototype, "validators", void 0);
        return DynamicFormControlModel;
    }());

    var __extends$2 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$2 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     * @template T
     */
    var DynamicFormValueControlModel = /** @class */ (function (_super) {
        __extends$2(DynamicFormValueControlModel, _super);
        function DynamicFormValueControlModel(config$$1, layout) {
            var _this = _super.call(this, config$$1, layout) || this;
            _this.additional = isObject(config$$1.additional) ? config$$1.additional : null;
            _this.hint = config$$1.hint || null;
            _this.required = isBoolean(config$$1.required) ? config$$1.required : false;
            _this.tabIndex = config$$1.tabIndex || null;
            _this.value = config$$1.value !== null && config$$1.value !== undefined ? config$$1.value : null;
            _this.valueUpdates = new Subject();
            _this.valueUpdates.subscribe(function (value) { return _this.value = value; });
            return _this;
        }
        Object.defineProperty(DynamicFormValueControlModel.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @param {?=} defaultValue
         * @return {?}
         */
        DynamicFormValueControlModel.prototype.getAdditional = /**
         * @param {?} key
         * @param {?=} defaultValue
         * @return {?}
         */
        function (key, defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
        };
        __decorate$2([
            serializable(),
            __metadata$2("design:type", Object)
        ], DynamicFormValueControlModel.prototype, "additional", void 0);
        __decorate$2([
            serializable(),
            __metadata$2("design:type", Object)
        ], DynamicFormValueControlModel.prototype, "hint", void 0);
        __decorate$2([
            serializable(),
            __metadata$2("design:type", Boolean)
        ], DynamicFormValueControlModel.prototype, "required", void 0);
        __decorate$2([
            serializable(),
            __metadata$2("design:type", Object)
        ], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
        __decorate$2([
            serializable("value"),
            __metadata$2("design:type", Object)
        ], DynamicFormValueControlModel.prototype, "_value", void 0);
        return DynamicFormValueControlModel;
    }(DynamicFormControlModel));

    var __extends$3 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$3 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var DynamicFormArrayGroupModel = /** @class */ (function () {
        function DynamicFormArrayGroupModel(context, group, index) {
            if (group === void 0) { group = []; }
            if (index === void 0) { index = -1; }
            this.$implicit = this;
            this.context = context;
            this.group = group;
            this.index = index;
        }
        Object.defineProperty(DynamicFormArrayGroupModel.prototype, "parent", {
            get: /**
             * @return {?}
             */
            function () {
                return this.context;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormArrayGroupModel.prototype.get = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return this.group[index];
        };
        /**
         * @return {?}
         */
        DynamicFormArrayGroupModel.prototype.toJSON = /**
         * @return {?}
         */
        function () {
            return serialize(this);
        };
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Array)
        ], DynamicFormArrayGroupModel.prototype, "group", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Number)
        ], DynamicFormArrayGroupModel.prototype, "index", void 0);
        return DynamicFormArrayGroupModel;
    }());
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
    var DynamicFormArrayModel = /** @class */ (function (_super) {
        __extends$3(DynamicFormArrayModel, _super);
        function DynamicFormArrayModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.groups = [];
            // only to recreate model from JSON
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
            if (isFunction(config.groupFactory)) {
                _this.groupFactory = config.groupFactory;
            }
            else {
                throw new Error("group factory function must be specified for DynamicFormArrayModel");
            }
            _this.groupAsyncValidators = config.groupAsyncValidators || null;
            _this.groupPrototype = _this.groupFactory();
            _this.groupValidators = config.groupValidators || null;
            _this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
            if (Array.isArray(config.groups)) {
                config.groups.forEach(function (arrayGroup, index) {
                    _this.groups.push(new DynamicFormArrayGroupModel(_this, arrayGroup.group, arrayGroup.index || index));
                });
            }
            else {
                for (var index = 0; index < _this.initialCount; index++) {
                    _this.addGroup();
                }
            }
            return _this;
        }
        /**
         * @return {?}
         */
        DynamicFormArrayModel.prototype.updateGroupIndex = /**
         * @return {?}
         */
        function () {
            this.groups.forEach(function (group, index) { return group.index = index; });
        };
        Object.defineProperty(DynamicFormArrayModel.prototype, "size", {
            get: /**
             * @return {?}
             */
            function () {
                return this.groups.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormArrayModel.prototype.get = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return this.groups[index];
        };
        /**
         * @return {?}
         */
        DynamicFormArrayModel.prototype.addGroup = /**
         * @return {?}
         */
        function () {
            return this.insertGroup(this.groups.length);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormArrayModel.prototype.insertGroup = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            /** @type {?} */
            var group = new DynamicFormArrayGroupModel(this, this.groupFactory());
            this.groups.splice(index, 0, group);
            this.updateGroupIndex();
            return group;
        };
        /**
         * @param {?} index
         * @param {?} step
         * @return {?}
         */
        DynamicFormArrayModel.prototype.moveGroup = /**
         * @param {?} index
         * @param {?} step
         * @return {?}
         */
        function (index, step) {
            var _a;
            (_a = this.groups).splice.apply(_a, [index + step, 0].concat(this.groups.splice(index, 1)));
            this.updateGroupIndex();
        };
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormArrayModel.prototype.removeGroup = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.groups.splice(index, 1);
            this.updateGroupIndex();
        };
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Object)
        ], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Object)
        ], DynamicFormArrayModel.prototype, "groupValidators", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Array)
        ], DynamicFormArrayModel.prototype, "groups", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Number)
        ], DynamicFormArrayModel.prototype, "initialCount", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", Array)
        ], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
        __decorate$3([
            serializable(),
            __metadata$3("design:type", String)
        ], DynamicFormArrayModel.prototype, "type", void 0);
        return DynamicFormArrayModel;
    }(DynamicFormControlModel));

    var __extends$4 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$4 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     */
    var DynamicCheckControlModel = /** @class */ (function (_super) {
        __extends$4(DynamicCheckControlModel, _super);
        function DynamicCheckControlModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.labelPosition = config.labelPosition || null;
            _this.value = isBoolean(_this.value) ? _this.value : false;
            return _this;
        }
        Object.defineProperty(DynamicCheckControlModel.prototype, "checked", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.value;
            },
            set: /**
             * @param {?} checked
             * @return {?}
             */
            function (checked) {
                this.valueUpdates.next(checked);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicCheckControlModel.prototype.toggle = /**
         * @return {?}
         */
        function () {
            this.checked = !this.checked;
        };
        __decorate$4([
            serializable(),
            __metadata$4("design:type", Object)
        ], DynamicCheckControlModel.prototype, "labelPosition", void 0);
        return DynamicCheckControlModel;
    }(DynamicFormValueControlModel));

    var __extends$5 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$5 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = "CHECKBOX";
    var DynamicCheckboxModel = /** @class */ (function (_super) {
        __extends$5(DynamicCheckboxModel, _super);
        function DynamicCheckboxModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
            _this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;
            return _this;
        }
        __decorate$5([
            serializable(),
            __metadata$5("design:type", Boolean)
        ], DynamicCheckboxModel.prototype, "indeterminate", void 0);
        __decorate$5([
            serializable(),
            __metadata$5("design:type", String)
        ], DynamicCheckboxModel.prototype, "type", void 0);
        return DynamicCheckboxModel;
    }(DynamicCheckControlModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AUTOCOMPLETE_OFF = "off";
    /** @type {?} */
    var AUTOCOMPLETE_ON = "on";
    /** @type {?} */
    var AUTOFILL_TOKEN_BILLING = "billing";
    /** @type {?} */
    var AUTOFILL_TOKEN_SHIPPING = "shipping";
    /** @type {?} */
    var AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];
    /** @type {?} */
    var AUTOFILL_TOKEN_HOME = "home";
    /** @type {?} */
    var AUTOFILL_TOKEN_WORK = "work";
    /** @type {?} */
    var AUTOFILL_TOKEN_MOBILE = "mobile";
    /** @type {?} */
    var AUTOFILL_TOKEN_FAX = "fax";
    /** @type {?} */
    var AUTOFILL_TOKEN_PAGER = "pager";
    /** @type {?} */
    var AUTOFILL_TOKENS_CONTACT = [
        AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK
    ];
    /** @type {?} */
    var AUTOFILL_FIELD_STREET_ADDRESS = "street-address";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LINE_1 = "address-line1";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LINE_2 = "address-line2";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LINE_3 = "address-line3";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LEVEL_4 = "address-level4";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LEVEL_3 = "address-level3";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LEVEL_2 = "address-level2";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDRESS_LEVEL_1 = "address-level1";
    /** @type {?} */
    var AUTOFILL_FIELD_NAME = "name";
    /** @type {?} */
    var AUTOFILL_FIELD_HONORIFIC_PREFIX = "honorific-prefix";
    /** @type {?} */
    var AUTOFILL_FIELD_GIVEN_NAME = "given-name";
    /** @type {?} */
    var AUTOFILL_FIELD_ADDITIONAL_NAME = "additional-name";
    /** @type {?} */
    var AUTOFILL_FIELD_FAMILY_NAME = "family-name";
    /** @type {?} */
    var AUTOFILL_FIELD_HONORIFIC_SUFFIX = "honorific-suffix";
    /** @type {?} */
    var AUTOFILL_FIELD_NICKNAME = "nickname";
    /** @type {?} */
    var AUTOFILL_FIELD_USERNAME = "username";
    /** @type {?} */
    var AUTOFILL_FIELD_NEW_PASSWORD = "new-password";
    /** @type {?} */
    var AUTOFILL_FIELD_CURRENT_PASSWORD = "current-password";
    /** @type {?} */
    var AUTOFILL_FIELD_ORGANIZATION_TITLE = "organization-title";
    /** @type {?} */
    var AUTOFILL_FIELD_ORGANIZATION = "organization";
    /** @type {?} */
    var AUTOFILL_FIELD_COUNTRY = "country";
    /** @type {?} */
    var AUTOFILL_FIELD_COUNTRY_NAME = "country-name";
    /** @type {?} */
    var AUTOFILL_FIELD_POSTAL_CODE = "postal-code";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_NAME = "cc-name";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_GIVEN_NAME = "cc-given-name";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_ADDITIONAL_NAME = "cc-additional-name";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_FAMILY_NAME = "cc-family-name";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_NUMBER = "cc-number";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_EXP = "cc-exp";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_EXP_MONTH = "cc-exp-month";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_EXP_YEAR = "cc-exp-year";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_CSC = "cc-csc";
    /** @type {?} */
    var AUTOFILL_FIELD_CC_TYPE = "cc-type";
    /** @type {?} */
    var AUTOFILL_FIELD_TRANSACTION_CURRENCY = "transaction-currency";
    /** @type {?} */
    var AUTOFILL_FIELD_TRANSACTION_AMOUNT = "transaction-amount";
    /** @type {?} */
    var AUTOFILL_FIELD_LANGUAGE = "language";
    /** @type {?} */
    var AUTOFILL_FIELD_BDAY = "bday";
    /** @type {?} */
    var AUTOFILL_FIELD_BDAY_DAY = "bday-day";
    /** @type {?} */
    var AUTOFILL_FIELD_BDAY_MONTH = "bday-month";
    /** @type {?} */
    var AUTOFILL_FIELD_BDAY_YEAR = "bday-year";
    /** @type {?} */
    var AUTOFILL_FIELD_SEX = "sex";
    /** @type {?} */
    var AUTOFILL_FIELD_URL = "url";
    /** @type {?} */
    var AUTOFILL_FIELD_PHOTO = "photo";
    /** @type {?} */
    var AUTOFILL_FIELDS = [
        AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,
        AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,
        AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,
        AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,
        AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,
        AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,
        AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,
        AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,
        AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,
        AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,
        AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,
        AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO
    ];
    /** @type {?} */
    var AUTOFILL_FIELD_TEL = "tel";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_COUNTRY_CODE = "tel-country-code";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_NATIONAL = "tel-national";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_AREA_CODE = "tel-area-code";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_LOCAL = "tel-local";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_LOCAL_PREFIX = "tel-local-prefix";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = "tel-local-suffix";
    /** @type {?} */
    var AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = "tel-extension";
    /** @type {?} */
    var AUTOFILL_FIELD_EMAIL = "email";
    /** @type {?} */
    var AUTOFILL_FIELD_IMPP = "impp";
    /** @type {?} */
    var AUTOFILL_FIELDS_CONTACT = [
        AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,
        AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,
        AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP
    ];
    /**
     * @param {?} token
     * @return {?}
     */
    function isAddressToken(token) {
        return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function isContactField(token) {
        return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function isContactToken(token) {
        return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function isField(token) {
        return AUTOFILL_FIELDS.indexOf(token) > -1;
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function isSectionToken(token) {
        return token.startsWith("section-");
    }
    /**
     * @param {?} tokens
     * @return {?}
     */
    function validate(tokens) {
        /** @type {?} */
        var toExpression = function (total, currentValue) { return total + "|" + currentValue; };
        /** @type {?} */
        var tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression);
        /** @type {?} */
        var tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression);
        /** @type {?} */
        var fields = AUTOFILL_FIELDS.reduce(toExpression);
        /** @type {?} */
        var fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression);
        /** @type {?} */
        var regex = new RegExp("^(section-\\w+\\s{1})?((" + tokensAddress + "){1}\\s)?((" + fields + "){1}|((" + tokensContact + "){1}\\s{1}(" + fieldsContact + ")))$");
        return regex.test(tokens);
    }

    var __extends$6 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$6 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     * @template T
     */
    var DynamicInputControlModel = /** @class */ (function (_super) {
        __extends$6(DynamicInputControlModel, _super);
        function DynamicInputControlModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;
            _this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
            _this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;
            _this.minLength = isNumber(config.minLength) ? config.minLength : null;
            _this.placeholder = config.placeholder || "";
            _this.prefix = config.prefix || null;
            _this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
            _this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;
            _this.suffix = config.suffix || null;
            return _this;
        }
        __decorate$6([
            serializable(),
            __metadata$6("design:type", String)
        ], DynamicInputControlModel.prototype, "autoComplete", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Boolean)
        ], DynamicInputControlModel.prototype, "autoFocus", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Object)
        ], DynamicInputControlModel.prototype, "maxLength", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Object)
        ], DynamicInputControlModel.prototype, "minLength", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", String)
        ], DynamicInputControlModel.prototype, "placeholder", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Object)
        ], DynamicInputControlModel.prototype, "prefix", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Boolean)
        ], DynamicInputControlModel.prototype, "readOnly", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Boolean)
        ], DynamicInputControlModel.prototype, "spellCheck", void 0);
        __decorate$6([
            serializable(),
            __metadata$6("design:type", Object)
        ], DynamicInputControlModel.prototype, "suffix", void 0);
        return DynamicInputControlModel;
    }(DynamicFormValueControlModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} mask
     * @return {?}
     */
    function maskToString(mask) {
        if (isString(mask)) {
            return (/** @type {?} */ (mask));
        }
        else if (mask instanceof RegExp) {
            return mask.toString();
        }
        else if (Array.isArray(mask)) {
            return (/** @type {?} */ (mask.map(function (value) { return maskToString(value); })));
        }
        return null;
    }
    /**
     * @param {?} mask
     * @return {?}
     */
    function maskFromString(mask) {
        if (isString(mask)) {
            /** @type {?} */
            var isRegExp = ((/** @type {?} */ (mask))).startsWith("/") && ((/** @type {?} */ (mask))).endsWith("/");
            return isRegExp ? new RegExp(((/** @type {?} */ (mask))).slice(1, mask.length - 1)) : mask;
        }
        else if (Array.isArray(mask)) {
            return (/** @type {?} */ (((/** @type {?} */ (mask))).map(function (value) { return maskFromString(value); })));
        }
        return null;
    }
    /**
     * @param {?} _key
     * @param {?} value
     * @return {?}
     */
    function parseReviver(_key, value) {
        /** @type {?} */
        var regexDateISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|([+\-])([\d|:]*))?$/;
        return isString(value) && regexDateISO.test(value) ? new Date(value) : value;
    }

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var AuditSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(AuditSubscriber, _super);
        function AuditSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            return _this;
        }
        AuditSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                var duration = tryCatch(this.durationSelector)(value);
                if (duration === errorObject) {
                    this.destination.error(errorObject.e);
                }
                else {
                    var innerSubscription = subscribeToResult(this, duration);
                    if (!innerSubscription || innerSubscription.closed) {
                        this.clearThrottle();
                    }
                    else {
                        this.add(this.throttled = innerSubscription);
                    }
                }
            }
        };
        AuditSubscriber.prototype.clearThrottle = function () {
            var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = null;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            this.clearThrottle();
        };
        AuditSubscriber.prototype.notifyComplete = function () {
            this.clearThrottle();
        };
        return AuditSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var BufferSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferSubscriber, _super);
        function BufferSubscriber(destination, closingNotifier) {
            var _this = _super.call(this, destination) || this;
            _this.buffer = [];
            _this.add(subscribeToResult(_this, closingNotifier));
            return _this;
        }
        BufferSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
        };
        return BufferSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferCountSubscriber, _super);
        function BufferCountSubscriber(destination, bufferSize) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.buffer = [];
            return _this;
        }
        BufferCountSubscriber.prototype._next = function (value) {
            var buffer = this.buffer;
            buffer.push(value);
            if (buffer.length == this.bufferSize) {
                this.destination.next(buffer);
                this.buffer = [];
            }
        };
        BufferCountSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer.length > 0) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber;
    }(Subscriber));
    var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferSkipCountSubscriber, _super);
        function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.startBufferEvery = startBufferEvery;
            _this.buffers = [];
            _this.count = 0;
            return _this;
        }
        BufferSkipCountSubscriber.prototype._next = function (value) {
            var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
            this.count++;
            if (count % startBufferEvery === 0) {
                buffers.push([]);
            }
            for (var i = buffers.length; i--;) {
                var buffer = buffers[i];
                buffer.push(value);
                if (buffer.length === bufferSize) {
                    buffers.splice(i, 1);
                    this.destination.next(buffer);
                }
            }
        };
        BufferSkipCountSubscriber.prototype._complete = function () {
            var _a = this, buffers = _a.buffers, destination = _a.destination;
            while (buffers.length > 0) {
                var buffer = buffers.shift();
                if (buffer.length > 0) {
                    destination.next(buffer);
                }
            }
            _super.prototype._complete.call(this);
        };
        return BufferSkipCountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
    var Context = /*@__PURE__*/ (function () {
        function Context() {
            this.buffer = [];
        }
        return Context;
    }());
    var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferTimeSubscriber, _super);
        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.bufferTimeSpan = bufferTimeSpan;
            _this.bufferCreationInterval = bufferCreationInterval;
            _this.maxBufferSize = maxBufferSize;
            _this.scheduler = scheduler;
            _this.contexts = [];
            var context = _this.openContext();
            _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
            if (_this.timespanOnly) {
                var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
            else {
                var closeState = { subscriber: _this, context: context };
                var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
            }
            return _this;
        }
        BufferTimeSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;
            for (var i = 0; i < len; i++) {
                var context_1 = contexts[i];
                var buffer = context_1.buffer;
                buffer.push(value);
                if (buffer.length == this.maxBufferSize) {
                    filledBufferContext = context_1;
                }
            }
            if (filledBufferContext) {
                this.onBufferFull(filledBufferContext);
            }
        };
        BufferTimeSubscriber.prototype._error = function (err) {
            this.contexts.length = 0;
            _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber.prototype._complete = function () {
            var _a = this, contexts = _a.contexts, destination = _a.destination;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                destination.next(context_2.buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferTimeSubscriber.prototype._unsubscribe = function () {
            this.contexts = null;
        };
        BufferTimeSubscriber.prototype.onBufferFull = function (context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);
            if (!this.closed && this.timespanOnly) {
                context = this.openContext();
                var bufferTimeSpan = this.bufferTimeSpan;
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
        };
        BufferTimeSubscriber.prototype.openContext = function () {
            var context = new Context();
            this.contexts.push(context);
            return context;
        };
        BufferTimeSubscriber.prototype.closeContext = function (context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;
            if (spliceIndex >= 0) {
                contexts.splice(contexts.indexOf(context), 1);
            }
        };
        return BufferTimeSubscriber;
    }(Subscriber));
    function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
            subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
            state.context = subscriber.openContext();
            state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
    }
    function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
            subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
            action.schedule(state, bufferCreationInterval);
        }
    }
    function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber, context = arg.context;
        subscriber.closeContext(context);
    }

    /** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
    var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferToggleSubscriber, _super);
        function BufferToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.openings = openings;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(subscribeToResult(_this, openings));
            return _this;
        }
        BufferToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].buffer.push(value);
            }
        };
        BufferToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_1 = contexts.shift();
                context_1.subscription.unsubscribe();
                context_1.buffer = null;
                context_1.subscription = null;
            }
            this.contexts = null;
            _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                this.destination.next(context_2.buffer);
                context_2.subscription.unsubscribe();
                context_2.buffer = null;
                context_2.subscription = null;
            }
            this.contexts = null;
            _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
            this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber.prototype.openBuffer = function (value) {
            try {
                var closingSelector = this.closingSelector;
                var closingNotifier = closingSelector.call(this, value);
                if (closingNotifier) {
                    this.trySubscribe(closingNotifier);
                }
            }
            catch (err) {
                this._error(err);
            }
        };
        BufferToggleSubscriber.prototype.closeBuffer = function (context) {
            var contexts = this.contexts;
            if (contexts && context) {
                var buffer = context.buffer, subscription = context.subscription;
                this.destination.next(buffer);
                contexts.splice(contexts.indexOf(context), 1);
                this.remove(subscription);
                subscription.unsubscribe();
            }
        };
        BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new Subscription();
            var context = { buffer: buffer, subscription: subscription };
            contexts.push(context);
            var innerSubscription = subscribeToResult(this, closingNotifier, context);
            if (!innerSubscription || innerSubscription.closed) {
                this.closeBuffer(context);
            }
            else {
                innerSubscription.context = context;
                this.add(innerSubscription);
                subscription.add(innerSubscription);
            }
        };
        return BufferToggleSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(BufferWhenSubscriber, _super);
        function BufferWhenSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.closingSelector = closingSelector;
            _this.subscribing = false;
            _this.openBuffer();
            return _this;
        }
        BufferWhenSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferWhenSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferWhenSubscriber.prototype._unsubscribe = function () {
            this.buffer = null;
            this.subscribing = false;
        };
        BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openBuffer();
        };
        BufferWhenSubscriber.prototype.notifyComplete = function () {
            if (this.subscribing) {
                this.complete();
            }
            else {
                this.openBuffer();
            }
        };
        BufferWhenSubscriber.prototype.openBuffer = function () {
            var closingSubscription = this.closingSubscription;
            if (closingSubscription) {
                this.remove(closingSubscription);
                closingSubscription.unsubscribe();
            }
            var buffer = this.buffer;
            if (this.buffer) {
                this.destination.next(buffer);
            }
            this.buffer = [];
            var closingNotifier = tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject) {
                this.error(errorObject.e);
            }
            else {
                closingSubscription = new Subscription();
                this.closingSubscription = closingSubscription;
                this.add(closingSubscription);
                this.subscribing = true;
                closingSubscription.add(subscribeToResult(this, closingNotifier));
                this.subscribing = false;
            }
        };
        return BufferWhenSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var CatchSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            var _this = _super.call(this, destination) || this;
            _this.selector = selector;
            _this.caught = caught;
            return _this;
        }
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                }
                catch (err2) {
                    _super.prototype.error.call(this, err2);
                    return;
                }
                this._unsubscribeAndRecycle();
                var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
                this.add(innerSubscriber);
                subscribeToResult(this, result, undefined, undefined, innerSubscriber);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var CountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(CountSubscriber, _super);
        function CountSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.count = 0;
            _this.index = 0;
            return _this;
        }
        CountSubscriber.prototype._next = function (value) {
            if (this.predicate) {
                this._tryPredicate(value);
            }
            else {
                this.count++;
            }
        };
        CountSubscriber.prototype._tryPredicate = function (value) {
            var result;
            try {
                result = this.predicate(value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.count++;
            }
        };
        CountSubscriber.prototype._complete = function () {
            this.destination.next(this.count);
            this.destination.complete();
        };
        return CountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DebounceSubscriber, _super);
        function DebounceSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            _this.durationSubscription = null;
            return _this;
        }
        DebounceSubscriber.prototype._next = function (value) {
            try {
                var result = this.durationSelector.call(this, value);
                if (result) {
                    this._tryNext(value, result);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DebounceSubscriber.prototype._complete = function () {
            this.emitValue();
            this.destination.complete();
        };
        DebounceSubscriber.prototype._tryNext = function (value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;
            if (subscription) {
                subscription.unsubscribe();
                this.remove(subscription);
            }
            subscription = subscribeToResult(this, duration);
            if (subscription && !subscription.closed) {
                this.add(this.durationSubscription = subscription);
            }
        };
        DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        DebounceSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                var value = this.value;
                var subscription = this.durationSubscription;
                if (subscription) {
                    this.durationSubscription = null;
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
                this.value = null;
                this.hasValue = false;
                _super.prototype._next.call(this, value);
            }
        };
        return DebounceSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
    var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.dueTime = dueTime;
            _this.scheduler = scheduler;
            _this.debouncedSubscription = null;
            _this.lastValue = null;
            _this.hasValue = false;
            return _this;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                var lastValue = this.lastValue;
                this.lastValue = null;
                this.hasValue = false;
                this.destination.next(lastValue);
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber));
    function dispatchNext$2(subscriber) {
        subscriber.debouncedNext();
    }

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DefaultIfEmptySubscriber, _super);
        function DefaultIfEmptySubscriber(destination, defaultValue) {
            var _this = _super.call(this, destination) || this;
            _this.defaultValue = defaultValue;
            _this.isEmpty = true;
            return _this;
        }
        DefaultIfEmptySubscriber.prototype._next = function (value) {
            this.isEmpty = false;
            this.destination.next(value);
        };
        DefaultIfEmptySubscriber.prototype._complete = function () {
            if (this.isEmpty) {
                this.destination.next(this.defaultValue);
            }
            this.destination.complete();
        };
        return DefaultIfEmptySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
    var DelaySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.delay = delay;
            _this.scheduler = scheduler;
            _this.queue = [];
            _this.active = false;
            _this.errored = false;
            return _this;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            }
            else {
                this.unsubscribe();
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            var destination = this.destination;
            destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
            this.unsubscribe();
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification.createComplete());
            this.unsubscribe();
        };
        return DelaySubscriber;
    }(Subscriber));
    var DelayMessage = /*@__PURE__*/ (function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }());

    /** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DelayWhenSubscriber, _super);
        function DelayWhenSubscriber(destination, delayDurationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.delayDurationSelector = delayDurationSelector;
            _this.completed = false;
            _this.delayNotifierSubscriptions = [];
            _this.index = 0;
            return _this;
        }
        DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            var value = this.removeSubscription(innerSub);
            if (value) {
                this.destination.next(value);
            }
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype._next = function (value) {
            var index = this.index++;
            try {
                var delayNotifier = this.delayDurationSelector(value, index);
                if (delayNotifier) {
                    this.tryDelay(delayNotifier, value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DelayWhenSubscriber.prototype._complete = function () {
            this.completed = true;
            this.tryComplete();
            this.unsubscribe();
        };
        DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
            if (subscriptionIdx !== -1) {
                this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            }
            return subscription.outerValue;
        };
        DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
            var notifierSubscription = subscribeToResult(this, delayNotifier, value);
            if (notifierSubscription && !notifierSubscription.closed) {
                var destination = this.destination;
                destination.add(notifierSubscription);
                this.delayNotifierSubscriptions.push(notifierSubscription);
            }
        };
        DelayWhenSubscriber.prototype.tryComplete = function () {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
                this.destination.complete();
            }
        };
        return DelayWhenSubscriber;
    }(OuterSubscriber));
    var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
        __extends$1(SubscriptionDelayObservable, _super);
        function SubscriptionDelayObservable(source, subscriptionDelay) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subscriptionDelay = subscriptionDelay;
            return _this;
        }
        SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        };
        return SubscriptionDelayObservable;
    }(Observable));
    var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SubscriptionDelaySubscriber, _super);
        function SubscriptionDelaySubscriber(parent, source) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.source = source;
            _this.sourceSubscribed = false;
            return _this;
        }
        SubscriptionDelaySubscriber.prototype._next = function (unused) {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype._error = function (err) {
            this.unsubscribe();
            this.parent.error(err);
        };
        SubscriptionDelaySubscriber.prototype._complete = function () {
            this.unsubscribe();
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
            if (!this.sourceSubscribed) {
                this.sourceSubscribed = true;
                this.unsubscribe();
                this.source.subscribe(this.parent);
            }
        };
        return SubscriptionDelaySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DeMaterializeSubscriber, _super);
        function DeMaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        DeMaterializeSubscriber.prototype._next = function (value) {
            value.observe(this.destination);
        };
        return DeMaterializeSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DistinctSubscriber, _super);
        function DistinctSubscriber(destination, keySelector, flushes) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.values = new Set();
            if (flushes) {
                _this.add(subscribeToResult(_this, flushes));
            }
            return _this;
        }
        DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values.clear();
        };
        DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DistinctSubscriber.prototype._next = function (value) {
            if (this.keySelector) {
                this._useKeySelector(value);
            }
            else {
                this._finalizeNext(value, value);
            }
        };
        DistinctSubscriber.prototype._useKeySelector = function (value) {
            var key;
            var destination = this.destination;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this._finalizeNext(key, value);
        };
        DistinctSubscriber.prototype._finalizeNext = function (key, value) {
            var values = this.values;
            if (!values.has(key)) {
                values.add(key);
                this.destination.next(value);
            }
        };
        return DistinctSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
    var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.hasKey = false;
            if (typeof compare === 'function') {
                _this.compare = compare;
            }
            return _this;
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch(this.keySelector)(value);
                if (key === errorObject) {
                    return this.destination.error(errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch(this.compare)(this.key, key);
                if (result === errorObject) {
                    return this.destination.error(errorObject.e);
                }
            }
            else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var FilterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.count = 0;
            return _this;
        }
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
    function tap(nextOrObserver, error, complete) {
        return function tapOperatorFunction(source) {
            return source.lift(new DoOperator(nextOrObserver, error, complete));
        };
    }
    var DoOperator = /*@__PURE__*/ (function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }());
    var TapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TapSubscriber, _super);
        function TapSubscriber(destination, observerOrNext, error, complete) {
            var _this = _super.call(this, destination) || this;
            _this._tapNext = noop;
            _this._tapError = noop;
            _this._tapComplete = noop;
            _this._tapError = error || noop;
            _this._tapComplete = complete || noop;
            if (isFunction$1(observerOrNext)) {
                _this._context = _this;
                _this._tapNext = observerOrNext;
            }
            else if (observerOrNext) {
                _this._context = observerOrNext;
                _this._tapNext = observerOrNext.next || noop;
                _this._tapError = observerOrNext.error || noop;
                _this._tapComplete = observerOrNext.complete || noop;
            }
            return _this;
        }
        TapSubscriber.prototype._next = function (value) {
            try {
                this._tapNext.call(this._context, value);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(value);
        };
        TapSubscriber.prototype._error = function (err) {
            try {
                this._tapError.call(this._context, err);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.error(err);
        };
        TapSubscriber.prototype._complete = function () {
            try {
                this._tapComplete.call(this._context);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            return this.destination.complete();
        };
        return TapSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
    var TakeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TakeSubscriber, _super);
        function TakeSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        TakeSubscriber.prototype._next = function (value) {
            var total = this.total;
            var count = ++this.count;
            if (count <= total) {
                this.destination.next(value);
                if (count === total) {
                    this.destination.complete();
                    this.unsubscribe();
                }
            }
        };
        return TakeSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var EverySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.source = source;
            _this.index = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SwitchFirstSubscriber, _super);
        function SwitchFirstSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasCompleted = false;
            _this.hasSubscription = false;
            return _this;
        }
        SwitchFirstSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.hasSubscription = true;
                this.add(subscribeToResult(this, value));
            }
        };
        SwitchFirstSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
    var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ExhaustMapSubscriber, _super);
        function ExhaustMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.hasSubscription = false;
            _this.hasCompleted = false;
            _this.index = 0;
            return _this;
        }
        ExhaustMapSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.tryNext(value);
            }
        };
        ExhaustMapSubscriber.prototype.tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.hasSubscription = true;
            this._innerSub(result, value, index);
        };
        ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, result, value, index, innerSubscriber);
        };
        ExhaustMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        ExhaustMapSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            destination.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return ExhaustMapSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ExpandSubscriber, _super);
        function ExpandSubscriber(destination, project, concurrent, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.scheduler = scheduler;
            _this.index = 0;
            _this.active = 0;
            _this.hasCompleted = false;
            if (concurrent < Number.POSITIVE_INFINITY) {
                _this.buffer = [];
            }
            return _this;
        }
        ExpandSubscriber.dispatch = function (arg) {
            var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (destination.closed) {
                this._complete();
                return;
            }
            var index = this.index++;
            if (this.active < this.concurrent) {
                destination.next(value);
                var result = tryCatch(this.project)(value, index);
                if (result === errorObject) {
                    destination.error(errorObject.e);
                }
                else if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                }
                else {
                    var state = { subscriber: this, result: result, value: value, index: index };
                    var destination_1 = this.destination;
                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
            this.active++;
            var destination = this.destination;
            destination.add(subscribeToResult(this, result, value, index));
        };
        ExpandSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._next(innerValue);
        };
        ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            var destination = this.destination;
            destination.remove(innerSub);
            this.active--;
            if (buffer && buffer.length > 0) {
                this._next(buffer.shift());
            }
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return ExpandSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
    var FinallySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(FinallySubscriber, _super);
        function FinallySubscriber(destination, callback) {
            var _this = _super.call(this, destination) || this;
            _this.add(new Subscription(callback));
            return _this;
        }
        return FinallySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(FindValueSubscriber, _super);
        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.yieldIndex = yieldIndex;
            _this.thisArg = thisArg;
            _this.index = 0;
            return _this;
        }
        FindValueSubscriber.prototype.notifyComplete = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.unsubscribe();
        };
        FindValueSubscriber.prototype._next = function (value) {
            var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
            var index = this.index++;
            try {
                var result = predicate.call(thisArg || this, value, index, this.source);
                if (result) {
                    this.notifyComplete(this.yieldIndex ? index : value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        FindValueSubscriber.prototype._complete = function () {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
        };
        return FindValueSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(IgnoreElementsSubscriber, _super);
        function IgnoreElementsSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IgnoreElementsSubscriber.prototype._next = function (unused) {
        };
        return IgnoreElementsSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(IsEmptySubscriber, _super);
        function IsEmptySubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
        };
        IsEmptySubscriber.prototype._next = function (value) {
            this.notifyComplete(false);
        };
        IsEmptySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return IsEmptySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
    var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TakeLastSubscriber, _super);
        function TakeLastSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.ring = new Array();
            _this.count = 0;
            return _this;
        }
        TakeLastSubscriber.prototype._next = function (value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;
            if (ring.length < total) {
                ring.push(value);
            }
            else {
                var index = count % total;
                ring[index] = value;
            }
        };
        TakeLastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var count = this.count;
            if (count > 0) {
                var total = this.count >= this.total ? this.total : this.count;
                var ring = this.ring;
                for (var i = 0; i < total; i++) {
                    var idx = (count++) % total;
                    destination.next(ring[idx]);
                }
            }
            destination.complete();
        };
        return TakeLastSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var MapToSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(MapToSubscriber, _super);
        function MapToSubscriber(destination, value) {
            var _this = _super.call(this, destination) || this;
            _this.value = value;
            return _this;
        }
        MapToSubscriber.prototype._next = function (x) {
            this.destination.next(this.value);
        };
        return MapToSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
    var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(MaterializeSubscriber, _super);
        function MaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        MaterializeSubscriber.prototype._next = function (value) {
            this.destination.next(Notification.createNext(value));
        };
        MaterializeSubscriber.prototype._error = function (err) {
            var destination = this.destination;
            destination.next(Notification.createError(err));
            destination.complete();
        };
        MaterializeSubscriber.prototype._complete = function () {
            var destination = this.destination;
            destination.next(Notification.createComplete());
            destination.complete();
        };
        return MaterializeSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var ScanSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this._seed = _seed;
            _this.hasSeed = hasSeed;
            _this.index = 0;
            return _this;
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.hasSeed = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.hasSeed) {
                this.seed = value;
                this.destination.next(value);
            }
            else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var index = this.index++;
            var result;
            try {
                result = this.accumulator(this.seed, value, index);
            }
            catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */
    var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(MergeScanSubscriber, _super);
        function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this.acc = acc;
            _this.concurrent = concurrent;
            _this.hasValue = false;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeScanSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var index = this.index++;
                var ish = tryCatch(this.accumulator)(this.acc, value);
                var destination = this.destination;
                if (ish === errorObject) {
                    destination.error(errorObject.e);
                }
                else {
                    this.active++;
                    this._innerSub(ish, value, index);
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, ish, value, index, innerSubscriber);
        };
        MergeScanSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
        };
        MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            var destination = this.destination;
            destination.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        return MergeScanSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(OnErrorResumeNextSubscriber, _super);
        function OnErrorResumeNextSubscriber(destination, nextSources) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.nextSources = nextSources;
            return _this;
        }
        OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._error = function (err) {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype._complete = function () {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
            var next = this.nextSources.shift();
            if (next) {
                var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
                var destination = this.destination;
                destination.add(innerSubscriber);
                subscribeToResult(this, next, undefined, undefined, innerSubscriber);
            }
            else {
                this.destination.complete();
            }
        };
        return OnErrorResumeNextSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(PairwiseSubscriber, _super);
        function PairwiseSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasPrev = false;
            return _this;
        }
        PairwiseSubscriber.prototype._next = function (value) {
            if (this.hasPrev) {
                this.destination.next([this.prev, value]);
            }
            else {
                this.hasPrev = true;
            }
            this.prev = value;
        };
        return PairwiseSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _map PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
    var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RepeatSubscriber, _super);
        function RepeatSubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RepeatSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.complete.call(this);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RepeatSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RepeatWhenSubscriber, _super);
        function RepeatWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            _this.sourceIsBeingSubscribedTo = true;
            return _this;
        }
        RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.sourceIsBeingSubscribedTo = true;
            this.source.subscribe(this);
        };
        RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            if (this.sourceIsBeingSubscribedTo === false) {
                return _super.prototype.complete.call(this);
            }
        };
        RepeatWhenSubscriber.prototype.complete = function () {
            this.sourceIsBeingSubscribedTo = false;
            if (!this.isStopped) {
                if (!this.retries) {
                    this.subscribeToRetries();
                }
                if (!this.retriesSubscription || this.retriesSubscription.closed) {
                    return _super.prototype.complete.call(this);
                }
                this._unsubscribeAndRecycle();
                this.notifications.next();
            }
        };
        RepeatWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
            if (notifications) {
                notifications.unsubscribe();
                this.notifications = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            _super.prototype._unsubscribeAndRecycle.call(this);
            this._unsubscribe = _unsubscribe;
            return this;
        };
        RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
            this.notifications = new Subject();
            var retries = tryCatch(this.notifier)(this.notifications);
            if (retries === errorObject) {
                return _super.prototype.complete.call(this);
            }
            this.retries = retries;
            this.retriesSubscription = subscribeToResult(this, retries);
        };
        return RepeatWhenSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var RetrySubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RetrySubscriber, _super);
        function RetrySubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RetrySubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.error.call(this, err);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RetrySubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(RetryWhenSubscriber, _super);
        function RetryWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            return _this;
        }
        RetryWhenSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var errors = this.errors;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    errors = new Subject();
                    retries = tryCatch(this.notifier)(errors);
                    if (retries === errorObject) {
                        return _super.prototype.error.call(this, errorObject.e);
                    }
                    retriesSubscription = subscribeToResult(this, retries);
                }
                else {
                    this.errors = null;
                    this.retriesSubscription = null;
                }
                this._unsubscribeAndRecycle();
                this.errors = errors;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                errors.next(err);
            }
        };
        RetryWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
            if (errors) {
                errors.unsubscribe();
                this.errors = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            this._unsubscribeAndRecycle();
            this._unsubscribe = _unsubscribe;
            this.source.subscribe(this);
        };
        return RetryWhenSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SampleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SampleSubscriber, _super);
        function SampleSubscriber() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.hasValue = false;
            return _this;
        }
        SampleSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
        };
        SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        SampleSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.value);
            }
        };
        return SampleSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
    var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SampleTimeSubscriber, _super);
        function SampleTimeSubscriber(destination, period, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.period = period;
            _this.scheduler = scheduler;
            _this.hasValue = false;
            _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
            return _this;
        }
        SampleTimeSubscriber.prototype._next = function (value) {
            this.lastValue = value;
            this.hasValue = true;
        };
        SampleTimeSubscriber.prototype.notifyNext = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.lastValue);
            }
        };
        return SampleTimeSubscriber;
    }(Subscriber));
    function dispatchNotification(state) {
        var subscriber = state.subscriber, period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
    }

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
    var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SequenceEqualSubscriber, _super);
        function SequenceEqualSubscriber(destination, compareTo, comparor) {
            var _this = _super.call(this, destination) || this;
            _this.compareTo = compareTo;
            _this.comparor = comparor;
            _this._a = [];
            _this._b = [];
            _this._oneComplete = false;
            _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
            return _this;
        }
        SequenceEqualSubscriber.prototype._next = function (value) {
            if (this._oneComplete && this._b.length === 0) {
                this.emit(false);
            }
            else {
                this._a.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype._complete = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
            this.unsubscribe();
        };
        SequenceEqualSubscriber.prototype.checkValues = function () {
            var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
            while (_a.length > 0 && _b.length > 0) {
                var a = _a.shift();
                var b = _b.shift();
                var areEqual = false;
                if (comparor) {
                    areEqual = tryCatch(comparor)(a, b);
                    if (areEqual === errorObject) {
                        this.destination.error(errorObject.e);
                    }
                }
                else {
                    areEqual = a === b;
                }
                if (!areEqual) {
                    this.emit(false);
                }
            }
        };
        SequenceEqualSubscriber.prototype.emit = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        SequenceEqualSubscriber.prototype.nextB = function (value) {
            if (this._oneComplete && this._a.length === 0) {
                this.emit(false);
            }
            else {
                this._b.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype.completeB = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
        };
        return SequenceEqualSubscriber;
    }(Subscriber));
    var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SequenceEqualCompareToSubscriber, _super);
        function SequenceEqualCompareToSubscriber(destination, parent) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            return _this;
        }
        SequenceEqualCompareToSubscriber.prototype._next = function (value) {
            this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber.prototype._error = function (err) {
            this.parent.error(err);
            this.unsubscribe();
        };
        SequenceEqualCompareToSubscriber.prototype._complete = function () {
            this.parent.completeB();
            this.unsubscribe();
        };
        return SequenceEqualCompareToSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
    var SingleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SingleSubscriber, _super);
        function SingleSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.seenValue = false;
            _this.index = 0;
            return _this;
        }
        SingleSubscriber.prototype.applySingleValue = function (value) {
            if (this.seenValue) {
                this.destination.error('Sequence contains more than one element');
            }
            else {
                this.seenValue = true;
                this.singleValue = value;
            }
        };
        SingleSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this.tryNext(value, index);
            }
            else {
                this.applySingleValue(value);
            }
        };
        SingleSubscriber.prototype.tryNext = function (value, index) {
            try {
                if (this.predicate(value, index, this.source)) {
                    this.applySingleValue(value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        SingleSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index > 0) {
                destination.next(this.seenValue ? this.singleValue : undefined);
                destination.complete();
            }
            else {
                destination.error(new EmptyError);
            }
        };
        return SingleSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var SkipSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SkipSubscriber, _super);
        function SkipSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        SkipSubscriber.prototype._next = function (x) {
            if (++this.count > this.total) {
                this.destination.next(x);
            }
        };
        return SkipSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
    var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SkipLastSubscriber, _super);
        function SkipLastSubscriber(destination, _skipCount) {
            var _this = _super.call(this, destination) || this;
            _this._skipCount = _skipCount;
            _this._count = 0;
            _this._ring = new Array(_skipCount);
            return _this;
        }
        SkipLastSubscriber.prototype._next = function (value) {
            var skipCount = this._skipCount;
            var count = this._count++;
            if (count < skipCount) {
                this._ring[count] = value;
            }
            else {
                var currentIndex = count % skipCount;
                var ring = this._ring;
                var oldValue = ring[currentIndex];
                ring[currentIndex] = value;
                this.destination.next(oldValue);
            }
        };
        return SkipLastSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SkipUntilSubscriber, _super);
        function SkipUntilSubscriber(destination, notifier) {
            var _this = _super.call(this, destination) || this;
            _this.hasValue = false;
            var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
            _this.add(innerSubscriber);
            _this.innerSubscription = innerSubscriber;
            subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
            return _this;
        }
        SkipUntilSubscriber.prototype._next = function (value) {
            if (this.hasValue) {
                _super.prototype._next.call(this, value);
            }
        };
        SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.hasValue = true;
            if (this.innerSubscription) {
                this.innerSubscription.unsubscribe();
            }
        };
        SkipUntilSubscriber.prototype.notifyComplete = function () {
        };
        return SkipUntilSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SkipWhileSubscriber, _super);
        function SkipWhileSubscriber(destination, predicate) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.skipping = true;
            _this.index = 0;
            return _this;
        }
        SkipWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (this.skipping) {
                this.tryCallPredicate(value);
            }
            if (!this.skipping) {
                destination.next(value);
            }
        };
        SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
            try {
                var result = this.predicate(value, this.index++);
                this.skipping = Boolean(result);
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        return SkipWhileSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
    var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
        __extends$1(SubscribeOnObservable, _super);
        function SubscribeOnObservable(source, delayTime, scheduler) {
            if (delayTime === void 0) {
                delayTime = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap;
            }
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.delayTime = delayTime;
            _this.scheduler = scheduler;
            if (!isNumeric(delayTime) || delayTime < 0) {
                _this.delayTime = 0;
            }
            if (!scheduler || typeof scheduler.schedule !== 'function') {
                _this.scheduler = asap;
            }
            return _this;
        }
        SubscribeOnObservable.create = function (source, delay, scheduler) {
            if (delay === void 0) {
                delay = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap;
            }
            return new SubscribeOnObservable(source, delay, scheduler);
        };
        SubscribeOnObservable.dispatch = function (arg) {
            var source = arg.source, subscriber = arg.subscriber;
            return this.add(source.subscribe(subscriber));
        };
        SubscribeOnObservable.prototype._subscribe = function (subscriber) {
            var delay = this.delayTime;
            var source = this.source;
            var scheduler = this.scheduler;
            return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
                source: source, subscriber: subscriber
            });
        };
        return SubscribeOnObservable;
    }(Observable));

    /** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
    var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.index = 0;
            return _this;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
            this.unsubscribe();
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            destination.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TakeUntilSubscriber, _super);
        function TakeUntilSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.seenValue = false;
            return _this;
        }
        TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.seenValue = true;
            this.complete();
        };
        TakeUntilSubscriber.prototype.notifyComplete = function () {
        };
        return TakeUntilSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TakeWhileSubscriber, _super);
        function TakeWhileSubscriber(destination, predicate) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.index = 0;
            return _this;
        }
        TakeWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            var result;
            try {
                result = this.predicate(value, this.index++);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
            var destination = this.destination;
            if (Boolean(predicateResult)) {
                destination.next(value);
            }
            else {
                destination.complete();
            }
        };
        return TakeWhileSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.durationSelector = durationSelector;
            _this._leading = _leading;
            _this._trailing = _trailing;
            _this._hasValue = false;
            return _this;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            this._hasValue = true;
            this._sendValue = value;
            if (!this._throttled) {
                if (this._leading) {
                    this.send();
                }
                else {
                    this.throttle(value);
                }
            }
        };
        ThrottleSubscriber.prototype.send = function () {
            var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
            if (_hasValue) {
                this.destination.next(_sendValue);
                this.throttle(_sendValue);
            }
            this._hasValue = false;
            this._sendValue = null;
        };
        ThrottleSubscriber.prototype.throttle = function (value) {
            var duration = this.tryDurationSelector(value);
            if (duration) {
                this.add(this._throttled = subscribeToResult(this, duration));
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            try {
                return this.durationSelector(value);
            }
            catch (err) {
                this.destination.error(err);
                return null;
            }
        };
        ThrottleSubscriber.prototype.throttlingDone = function () {
            var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
            if (_throttled) {
                _throttled.unsubscribe();
            }
            this._throttled = null;
            if (_trailing) {
                this.send();
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.throttlingDone();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this.throttlingDone();
        };
        return ThrottleSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
    var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(ThrottleTimeSubscriber, _super);
        function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
            var _this = _super.call(this, destination) || this;
            _this.duration = duration;
            _this.scheduler = scheduler;
            _this.leading = leading;
            _this.trailing = trailing;
            _this._hasTrailingValue = false;
            _this._trailingValue = null;
            return _this;
        }
        ThrottleTimeSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this.trailing) {
                    this._trailingValue = value;
                    this._hasTrailingValue = true;
                }
            }
            else {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
                if (this.leading) {
                    this.destination.next(value);
                }
            }
        };
        ThrottleTimeSubscriber.prototype._complete = function () {
            if (this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this.destination.complete();
            }
            else {
                this.destination.complete();
            }
        };
        ThrottleTimeSubscriber.prototype.clearThrottle = function () {
            var throttled = this.throttled;
            if (throttled) {
                if (this.trailing && this._hasTrailingValue) {
                    this.destination.next(this._trailingValue);
                    this._trailingValue = null;
                    this._hasTrailingValue = false;
                }
                throttled.unsubscribe();
                this.remove(throttled);
                this.throttled = null;
            }
        };
        return ThrottleTimeSubscriber;
    }(Subscriber));
    function dispatchNext$3(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
    }

    /** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(TimeoutWithSubscriber, _super);
        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.absoluteTimeout = absoluteTimeout;
            _this.waitFor = waitFor;
            _this.withObservable = withObservable;
            _this.scheduler = scheduler;
            _this.action = null;
            _this.scheduleTimeout();
            return _this;
        }
        TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
            var withObservable = subscriber.withObservable;
            subscriber._unsubscribeAndRecycle();
            subscriber.add(subscribeToResult(subscriber, withObservable));
        };
        TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
            var action = this.action;
            if (action) {
                this.action = action.schedule(this, this.waitFor);
            }
            else {
                this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
            }
        };
        TimeoutWithSubscriber.prototype._next = function (value) {
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
            _super.prototype._next.call(this, value);
        };
        TimeoutWithSubscriber.prototype._unsubscribe = function () {
            this.action = null;
            this.scheduler = null;
            this.withObservable = null;
        };
        return TimeoutWithSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

    /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(WindowSubscriber, _super);
        function WindowSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.window = new Subject();
            destination.next(_this.window);
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow();
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this._complete();
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
        };
        WindowSubscriber.prototype._unsubscribe = function () {
            this.window = null;
        };
        WindowSubscriber.prototype.openWindow = function () {
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var destination = this.destination;
            var newWindow = this.window = new Subject();
            destination.next(newWindow);
        };
        return WindowSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
    var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(WindowCountSubscriber, _super);
        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowSize = windowSize;
            _this.startWindowEvery = startWindowEvery;
            _this.windows = [new Subject()];
            _this.count = 0;
            destination.next(_this.windows[0]);
            return _this;
        }
        WindowCountSubscriber.prototype._next = function (value) {
            var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len && !this.closed; i++) {
                windows[i].next(value);
            }
            var c = this.count - windowSize + 1;
            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
                windows.shift().complete();
            }
            if (++this.count % startWindowEvery === 0 && !this.closed) {
                var window_1 = new Subject();
                windows.push(window_1);
                destination.next(window_1);
            }
        };
        WindowCountSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().error(err);
                }
            }
            this.destination.error(err);
        };
        WindowCountSubscriber.prototype._complete = function () {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().complete();
                }
            }
            this.destination.complete();
        };
        WindowCountSubscriber.prototype._unsubscribe = function () {
            this.count = 0;
            this.windows = null;
        };
        return WindowCountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
    var CountedSubject = /*@__PURE__*/ (function (_super) {
        __extends$1(CountedSubject, _super);
        function CountedSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._numberOfNextedValues = 0;
            return _this;
        }
        CountedSubject.prototype.next = function (value) {
            this._numberOfNextedValues++;
            _super.prototype.next.call(this, value);
        };
        Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
            get: function () {
                return this._numberOfNextedValues;
            },
            enumerable: true,
            configurable: true
        });
        return CountedSubject;
    }(Subject));
    var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(WindowTimeSubscriber, _super);
        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowTimeSpan = windowTimeSpan;
            _this.windowCreationInterval = windowCreationInterval;
            _this.maxWindowSize = maxWindowSize;
            _this.scheduler = scheduler;
            _this.windows = [];
            var window = _this.openWindow();
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                var closeState = { subscriber: _this, window: window, context: null };
                var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
            }
            else {
                var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
                _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
            }
            return _this;
        }
        WindowTimeSubscriber.prototype._next = function (value) {
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len; i++) {
                var window_1 = windows[i];
                if (!window_1.closed) {
                    window_1.next(value);
                    if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                        this.closeWindow(window_1);
                    }
                }
            }
        };
        WindowTimeSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            this.destination.error(err);
        };
        WindowTimeSubscriber.prototype._complete = function () {
            var windows = this.windows;
            while (windows.length > 0) {
                var window_2 = windows.shift();
                if (!window_2.closed) {
                    window_2.complete();
                }
            }
            this.destination.complete();
        };
        WindowTimeSubscriber.prototype.openWindow = function () {
            var window = new CountedSubject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
        };
        WindowTimeSubscriber.prototype.closeWindow = function (window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
        };
        return WindowTimeSubscriber;
    }(Subscriber));
    function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
        if (window) {
            subscriber.closeWindow(window);
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
    }
    function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = { action: action, subscription: null };
        var timeSpanState = { subscriber: subscriber, window: window, context: context };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
    }
    function dispatchWindowClose(state) {
        var subscriber = state.subscriber, window = state.window, context = state.context;
        if (context && context.action && context.subscription) {
            context.action.remove(context.subscription);
        }
        subscriber.closeWindow(window);
    }

    /** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(WindowToggleSubscriber, _super);
        function WindowToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.openings = openings;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
            return _this;
        }
        WindowToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            if (contexts) {
                var len = contexts.length;
                for (var i = 0; i < len; i++) {
                    contexts[i].window.next(value);
                }
            }
        };
        WindowToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_1 = contexts[index];
                    context_1.window.error(err);
                    context_1.subscription.unsubscribe();
                }
            }
            _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_2 = contexts[index];
                    context_2.window.complete();
                    context_2.subscription.unsubscribe();
                }
            }
            _super.prototype._complete.call(this);
        };
        WindowToggleSubscriber.prototype._unsubscribe = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_3 = contexts[index];
                    context_3.window.unsubscribe();
                    context_3.subscription.unsubscribe();
                }
            }
        };
        WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
                var closingSelector = this.closingSelector;
                var closingNotifier = tryCatch(closingSelector)(innerValue);
                if (closingNotifier === errorObject) {
                    return this.error(errorObject.e);
                }
                else {
                    var window_1 = new Subject();
                    var subscription = new Subscription();
                    var context_4 = { window: window_1, subscription: subscription };
                    this.contexts.push(context_4);
                    var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
                    if (innerSubscription.closed) {
                        this.closeWindow(this.contexts.length - 1);
                    }
                    else {
                        innerSubscription.context = context_4;
                        subscription.add(innerSubscription);
                    }
                    this.destination.next(window_1);
                }
            }
            else {
                this.closeWindow(this.contexts.indexOf(outerValue));
            }
        };
        WindowToggleSubscriber.prototype.notifyError = function (err) {
            this.error(err);
        };
        WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
            if (inner !== this.openSubscription) {
                this.closeWindow(this.contexts.indexOf(inner.context));
            }
        };
        WindowToggleSubscriber.prototype.closeWindow = function (index) {
            if (index === -1) {
                return;
            }
            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window, subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
        };
        return WindowToggleSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
        __extends$1(WindowSubscriber, _super);
        function WindowSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.closingSelector = closingSelector;
            _this.openWindow();
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
            if (this.closingNotification) {
                this.closingNotification.unsubscribe();
            }
        };
        WindowSubscriber.prototype.openWindow = function (innerSub) {
            if (innerSub === void 0) {
                innerSub = null;
            }
            if (innerSub) {
                this.remove(innerSub);
                innerSub.unsubscribe();
            }
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var window = this.window = new Subject();
            this.destination.next(window);
            var closingNotifier = tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject) {
                var err = errorObject.e;
                this.destination.error(err);
                this.window.error(err);
            }
            else {
                this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
            }
        };
        return WindowSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
        __extends$1(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            var _this = _super.call(this, destination) || this;
            _this.observables = observables;
            _this.project = project;
            _this.toRespond = [];
            var len = observables.length;
            _this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                _this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                _this.add(subscribeToResult(_this, observable, observable, i));
            }
            return _this;
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                }
                else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

    /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    var __extends$7 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$7 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
    //export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
    var DynamicInputModel = /** @class */ (function (_super) {
        __extends$7(DynamicInputModel, _super);
        function DynamicInputModel(config$$1, layout) {
            var _this = _super.call(this, config$$1, layout) || this;
            _this.files = null;
            _this.list$ = null;
            _this._list = null;
            _this._listId = null;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
            _this.accept = config$$1.accept || null;
            _this.inputType = config$$1.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
            _this.mask = config$$1.mask || null;
            _this.max = config$$1.max !== undefined ? config$$1.max : null;
            _this.min = config$$1.min !== undefined ? config$$1.min : null;
            _this.multiple = isBoolean(config$$1.multiple) ? config$$1.multiple : null;
            _this.pattern = config$$1.pattern || null;
            _this.step = isNumber(config$$1.step) ? config$$1.step : null;
            if (config$$1.list !== undefined) {
                _this.list = config$$1.list;
                _this._listId = _this.id + "List";
            }
            return _this;
        }
        Object.defineProperty(DynamicInputModel.prototype, "listId", {
            get: /**
             * @return {?}
             */
            function () {
                return this._listId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicInputModel.prototype, "hasList", {
            get: /**
             * @return {?}
             */
            function () {
                return isObservable(this.list$);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicInputModel.prototype, "list", {
            set: /**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                var _this = this;
                if (Array.isArray(list)) {
                    this._list = list;
                    this.list$ = of(this._list);
                }
                else if (isObservable(list)) {
                    this.list$ = ((/** @type {?} */ (list))).pipe(tap(function (list) { return _this._list = list; }));
                }
                else {
                    this._list = null;
                    this.list$ = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicInputModel.prototype.toJSON = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var json = _super.prototype.toJSON.call(this);
            if (this.mask !== null) {
                json.mask = maskToString(this.mask);
            }
            return json;
        };
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "accept", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", String)
        ], DynamicInputModel.prototype, "inputType", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "mask", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "max", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "min", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "multiple", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "pattern", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "step", void 0);
        __decorate$7([
            serializable("list"),
            __metadata$7("design:type", Object)
        ], DynamicInputModel.prototype, "_list", void 0);
        __decorate$7([
            serializable(),
            __metadata$7("design:type", String)
        ], DynamicInputModel.prototype, "type", void 0);
        return DynamicInputModel;
    }(DynamicInputControlModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_ACTION_DISABLE = "DISABLE";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_ACTION_ENABLE = "ENABLE";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_ACTION_VISIBLE = "VISIBLE";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_ACTION_HIDDEN = "HIDDEN";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_CONNECTIVE_AND = "AND";
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_CONNECTIVE_OR = "OR";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @param {?} relGroups
     * @return {?}
     */
    function findActivationRelation(relGroups) {
        /** @type {?} */
        var rel = relGroups.find(function (rel) {
            return rel.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE || rel.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE;
        });
        return rel !== undefined ? rel : null;
    }
    /**
     * @param {?} model
     * @param {?} controlGroup
     * @return {?}
     */
    function getRelatedFormControls(model, controlGroup) {
        /** @type {?} */
        var controls = [];
        model.relation.forEach(function (relGroup) { return relGroup.when.forEach(function (rel) {
            if (model.id === rel.id) {
                throw new Error("FormControl " + model.id + " cannot depend on itself");
            }
            /** @type {?} */
            var control = (/** @type {?} */ (controlGroup.get(rel.id)));
            if (control && !controls.some(function (controlElement) { return controlElement === control; })) {
                controls.push(control);
            }
        }); });
        return controls;
    }
    /**
     * @param {?} relGroup
     * @param {?} _formGroup
     * @return {?}
     */
    function isFormControlToBeDisabled(relGroup, _formGroup) {
        /** @type {?} */
        var formGroup = _formGroup;
        return relGroup.when.reduce(function (toBeDisabled, rel, index) {
            /** @type {?} */
            var control = formGroup.get(rel.id);
            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_DISABLE) {
                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && !toBeDisabled) {
                    return false;
                }
                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && toBeDisabled) {
                    return true;
                }
                return rel.value === control.value || rel.status === control.status;
            }
            if (control && relGroup.action === DYNAMIC_FORM_CONTROL_ACTION_ENABLE) {
                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_AND && toBeDisabled) {
                    return true;
                }
                if (index > 0 && relGroup.connective === DYNAMIC_FORM_CONTROL_CONNECTIVE_OR && !toBeDisabled) {
                    return false;
                }
                return !(rel.value === control.value || rel.status === control.status);
            }
            return false;
        }, false);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var  /**
     * @abstract
     */
    DynamicFormControlContainerComponent = /** @class */ (function () {
        function DynamicFormControlContainerComponent(componentFactoryResolver, layoutService, validationService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.layoutService = layoutService;
            this.validationService = validationService;
            this.context = null;
            //protected viewRefs: EmbeddedViewRef<DynamicFormControlModel>[] = [];
            this.componentSubscriptions = [];
            this.subscriptions = [];
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var groupChange = (/** @type {?} */ (changes["group"]));
            /** @type {?} */
            var modelChange = (/** @type {?} */ (changes["model"]));
            if (modelChange) {
                this.destroyFormControlComponent();
                //this.removeTemplates();
                this.createFormControlComponent();
                //this.embedTemplates();
            }
            if (groupChange || modelChange) {
                if (this.model) {
                    this.unsubscribe();
                    if (this.group) {
                        this.control = (/** @type {?} */ (this.group.get(this.model.id)));
                        this.subscriptions.push(this.control.valueChanges.subscribe(function (value) { return _this.onControlValueChanges(value); }));
                    }
                    this.subscriptions.push(this.model.disabledUpdates.subscribe(function (value) { return _this.onModelDisabledUpdates(value); }));
                    if (this.model instanceof DynamicFormValueControlModel) {
                        /** @type {?} */
                        var model = (/** @type {?} */ (this.model));
                        this.subscriptions.push(model.valueUpdates.subscribe(function (value) { return _this.onModelValueUpdates(value); }));
                    }
                    if (this.model.relation.length > 0) {
                        this.setControlRelations();
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyFormControlComponent();
            this.unsubscribe();
        };
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "errorMessages", {
            get: /**
             * @return {?}
             */
            function () {
                return this.validationService.createErrorMessages(this.control, this.model);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasHint", {
            get: /**
             * @return {?}
             */
            function () {
                return isString(((/** @type {?} */ (this.model))).hint);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return isString(this.model.label);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isCheckbox", {
            get: /**
             * @return {?}
             */
            function () {
                return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "elementId", {
            get: /**
             * @return {?}
             */
            function () {
                return this.layoutService.getElementId(this.model);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isInvalid", {
            get: /**
             * @return {?}
             */
            function () {
                return this.control.invalid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isValid", {
            get: /**
             * @return {?}
             */
            function () {
                return this.control.valid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "showErrorMessages", {
            get: /**
             * @return {?}
             */
            function () {
                return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "templates", {
            get: /**
             * @return {?}
             */
            function () {
                return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "startTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                    this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormControlContainerComponent.prototype, "endTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                    this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} context
         * @param {?} place
         * @param {?=} model
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.getClass = /**
         * @param {?} context
         * @param {?} place
         * @param {?=} model
         * @return {?}
         */
        function (context, place, model) {
            if (model === void 0) { model = this.model; }
            /** @type {?} */
            var controlLayout = (this.layout && this.layout[model.id]) || (/** @type {?} */ (model.layout));
            return this.layoutService.getClass(controlLayout, context, place);
        };
        /**
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.createFormControlComponent = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var componentType = this.componentType;
            if (componentType !== null) {
                /** @type {?} */
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                this.componentViewContainerRef.clear();
                this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
                /** @type {?} */
                var instance = this.componentRef.instance;
                instance.group = this.group;
                instance.layout = this.layout;
                instance.model = (/** @type {?} */ (this.model));
                if (this.templates) {
                    instance.templates = this.templates;
                }
                this.componentSubscriptions.push(instance.blur.subscribe(function ($event) { return _this.onBlur($event); }));
                this.componentSubscriptions.push(instance.change.subscribe(function ($event) { return _this.onChange($event); }));
                this.componentSubscriptions.push(instance.focus.subscribe(function ($event) { return _this.onFocus($event); }));
                if (instance.customEvent !== undefined) {
                    this.componentSubscriptions.push(instance.customEvent.subscribe(function ($event) { return _this.onCustomEvent($event); }));
                }
            }
        };
        /**
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.destroyFormControlComponent = /**
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                this.componentSubscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
                this.componentSubscriptions = [];
                this.componentRef.destroy();
            }
        };
        /*
        protected embedTemplates(): void {

            const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);

            if (Array.isArray(templates)) {

                templates.forEach(template => {

                    const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                    this.viewRefs.push(viewRef);
                });
            }
        }

        protected removeTemplates(): void {
            this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
        }
        */
        /*
            protected embedTemplates(): void {
        
                const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);
        
                if (Array.isArray(templates)) {
        
                    templates.forEach(template => {
        
                        const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                        this.viewRefs.push(viewRef);
                    });
                }
            }
        
            protected removeTemplates(): void {
                this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
            }
            */
        /**
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.setControlRelations = /*
            protected embedTemplates(): void {
        
                const templates = this.layoutService.getIndexedTemplates(this.model, this.templates);
        
                if (Array.isArray(templates)) {
        
                    templates.forEach(template => {
        
                        const viewRef = this.componentViewContainerRef.createEmbeddedView(template.templateRef, this.model, template.index);
                        this.viewRefs.push(viewRef);
                    });
                }
            }
        
            protected removeTemplates(): void {
                this.viewRefs.forEach(viewRef => this.componentViewContainerRef.remove(this.componentViewContainerRef.indexOf(viewRef)));
            }
            */
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var relActivation = findActivationRelation(this.model.relation);
            if (relActivation !== null) {
                /** @type {?} */
                var rel_1 = (/** @type {?} */ (relActivation));
                this.updateModelDisabled(rel_1);
                getRelatedFormControls(this.model, this.group).forEach(function (control) {
                    _this.subscriptions.push(control.valueChanges.subscribe(function () { return _this.updateModelDisabled(rel_1); }));
                    _this.subscriptions.push(control.statusChanges.subscribe(function () { return _this.updateModelDisabled(rel_1); }));
                });
            }
        };
        /**
         * @param {?} $event
         * @param {?} type
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.createDynamicFormControlEvent = /**
         * @param {?} $event
         * @param {?} type
         * @return {?}
         */
        function ($event, type) {
            return { $event: $event, context: this.context, control: this.control, group: this.group, model: this.model, type: type };
        };
        /**
         * @param {?} relation
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.updateModelDisabled = /**
         * @param {?} relation
         * @return {?}
         */
        function (relation) {
            this.model.disabledUpdates.next(isFormControlToBeDisabled(relation, this.group));
        };
        /**
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.unsubscribe = /**
         * @return {?}
         */
        function () {
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.subscriptions = [];
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onControlValueChanges = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.model instanceof DynamicFormValueControlModel) {
                /** @type {?} */
                var model = (/** @type {?} */ (this.model));
                if (model.value !== value) {
                    model.valueUpdates.next(value);
                }
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onModelValueUpdates = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.control.value !== value) {
                this.control.setValue(value);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onModelDisabledUpdates = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value ? this.control.disable() : this.control.enable();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event && $event instanceof Event) { // native HTML5 change event
                if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                    /** @type {?} */
                    var model = (/** @type {?} */ (this.model));
                    if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                        /** @type {?} */
                        var inputElement = $event.target || $event.srcElement;
                        model.files = (/** @type {?} */ (inputElement.files));
                    }
                }
                this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
            }
            else if (isDynamicFormControlEvent($event)) { // event bypass
                this.change.emit($event);
            }
            else { // custom library value change event
                this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onBlur = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (isDynamicFormControlEvent($event)) { // event bypass
                this.blur.emit($event);
            }
            else { // native HTML 5 or UI library blur event
                this.hasFocus = false;
                this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onFocus = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (isDynamicFormControlEvent($event)) { // event bypass
                this.focus.emit($event);
            }
            else { // native HTML 5 or UI library focus event
                this.hasFocus = true;
                this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DynamicFormControlContainerComponent.prototype.onCustomEvent = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var emitter = (/** @type {?} */ (this.customEvent));
            if (isDynamicFormControlEvent($event)) { // child event bypass
                emitter.emit($event);
            }
            else { // native UI library custom event
                emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
            }
        };
        return DynamicFormControlContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    var __extends$8 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /**
     * @abstract
     */
    var  /**
     * @abstract
     */
    DynamicTemplateableFormControlComponent = /** @class */ (function (_super) {
        __extends$8(DynamicTemplateableFormControlComponent, _super);
        function DynamicTemplateableFormControlComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        DynamicTemplateableFormControlComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.layoutService
                .filterTemplatesByModel(this.model, this.templates)
                .forEach(function (template) { return _this.bindTemplate(template); });
        };
        /**
         * @param {?} template
         * @return {?}
         */
        DynamicTemplateableFormControlComponent.prototype.bindTemplate = /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (isString(template.as) && this.templateDirectives.has(template.as)) {
                /** @type {?} */
                var property = (/** @type {?} */ (this.templateDirectives.get(template.as)));
                this.viewChild[property] = this.mapTemplate(template);
            }
        };
        return DynamicTemplateableFormControlComponent;
    }(DynamicFormControlComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamicIdDirective = /** @class */ (function () {
        function DynamicIdDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        DynamicIdDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.dynamicId) {
                this.renderer.setAttribute(this.elementRef.nativeElement, "id", (/** @type {?} */ (this.dynamicId)));
            }
        };
        DynamicIdDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: "[dynamicId]"
                    },] },
        ];
        /** @nocollapse */
        DynamicIdDirective.ctorParameters = function () { return [
            { type: i0.ElementRef },
            { type: i0.Renderer2 }
        ]; };
        DynamicIdDirective.propDecorators = {
            dynamicId: [{ type: i0.Input }]
        };
        return DynamicIdDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamicListDirective = /** @class */ (function () {
        function DynamicListDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        DynamicListDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (isString(this.listId)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, "list", (/** @type {?} */ (this.listId)));
            }
        };
        DynamicListDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: "[dynamicList]"
                    },] },
        ];
        /** @nocollapse */
        DynamicListDirective.ctorParameters = function () { return [
            { type: i0.ElementRef },
            { type: i0.Renderer2 }
        ]; };
        DynamicListDirective.propDecorators = {
            listId: [{ type: i0.Input, args: ["dynamicList",] }]
        };
        return DynamicListDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT = {
        Start: "START", End: "END",
    };
    var DynamicTemplateDirective = /** @class */ (function () {
        function DynamicTemplateDirective(templateRef) {
            this.templateRef = templateRef;
            this.align = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;
            this.as = null;
        }
        DynamicTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: "ng-template[modelId],ng-template[modelType]"
                    },] },
        ];
        /** @nocollapse */
        DynamicTemplateDirective.ctorParameters = function () { return [
            { type: i0.TemplateRef }
        ]; };
        DynamicTemplateDirective.propDecorators = {
            align: [{ type: i0.Input }],
            as: [{ type: i0.Input }],
            index: [{ type: i0.Input }],
            modelId: [{ type: i0.Input }],
            modelType: [{ type: i0.Input }]
        };
        return DynamicTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    var __extends$9 = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$8 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     */
    var DynamicDateControlModel = /** @class */ (function (_super) {
        __extends$9(DynamicDateControlModel, _super);
        function DynamicDateControlModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.format = config.format || null;
            _this.max = config.max || null;
            _this.min = config.min || null;
            _this.placeholder = config.placeholder || null;
            return _this;
        }
        __decorate$8([
            serializable(),
            __metadata$8("design:type", Object)
        ], DynamicDateControlModel.prototype, "format", void 0);
        __decorate$8([
            serializable(),
            __metadata$8("design:type", Object)
        ], DynamicDateControlModel.prototype, "max", void 0);
        __decorate$8([
            serializable(),
            __metadata$8("design:type", Object)
        ], DynamicDateControlModel.prototype, "min", void 0);
        __decorate$8([
            serializable(),
            __metadata$8("design:type", Object)
        ], DynamicDateControlModel.prototype, "placeholder", void 0);
        return DynamicDateControlModel;
    }(DynamicFormValueControlModel));

    var __extends$a = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$9 = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @abstract
     */
    var DynamicFileControlModel = /** @class */ (function (_super) {
        __extends$a(DynamicFileControlModel, _super);
        function DynamicFileControlModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.multiple = isBoolean(config.multiple) ? config.multiple : false;
            return _this;
        }
        __decorate$9([
            serializable(),
            __metadata$9("design:type", Boolean)
        ], DynamicFileControlModel.prototype, "multiple", void 0);
        return DynamicFileControlModel;
    }(DynamicFormValueControlModel));

    var __extends$b = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$a = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$a = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /**
     * @template T
     */
    var DynamicFormOption = /** @class */ (function () {
        function DynamicFormOption(config$$1) {
            this.disabled = isBoolean(config$$1.disabled) ? config$$1.disabled : false;
            this.label = config$$1.label || null;
            this.value = config$$1.value;
        }
        Object.defineProperty(DynamicFormOption.prototype, "text", {
            get: /**
             * @return {?}
             */
            function () {
                return this.label;
            },
            set: /**
             * @param {?} text
             * @return {?}
             */
            function (text) {
                this.label = text;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicFormOption.prototype.toJSON = /**
         * @return {?}
         */
        function () {
            return serialize(this);
        };
        __decorate$a([
            serializable(),
            __metadata$a("design:type", Boolean)
        ], DynamicFormOption.prototype, "disabled", void 0);
        __decorate$a([
            serializable(),
            __metadata$a("design:type", Object)
        ], DynamicFormOption.prototype, "label", void 0);
        __decorate$a([
            serializable(),
            __metadata$a("design:type", Object)
        ], DynamicFormOption.prototype, "value", void 0);
        return DynamicFormOption;
    }());
    /**
     * @abstract
     * @template T
     */
    var DynamicOptionControlModel = /** @class */ (function (_super) {
        __extends$b(DynamicOptionControlModel, _super);
        function DynamicOptionControlModel(config$$1, layout) {
            var _this = _super.call(this, config$$1, layout) || this;
            _this._options = [];
            _this.options = config$$1.options;
            return _this;
        }
        /**
         * @return {?}
         */
        DynamicOptionControlModel.prototype.updateOptions$ = /**
         * @return {?}
         */
        function () {
            this.options$ = of(this.options);
        };
        Object.defineProperty(DynamicOptionControlModel.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            set: /**
             * @param {?} options
             * @return {?}
             */
            function (options) {
                var _this = this;
                if (Array.isArray(options)) {
                    this._options = ((/** @type {?} */ (options))).map(function (optionConfig) {
                        return new DynamicFormOption(optionConfig);
                    });
                    this.updateOptions$();
                }
                else if (isObservable(options)) {
                    this.options$ = ((/** @type {?} */ (options))).pipe(map(function (optionsConfig) {
                        /** @type {?} */
                        var options = optionsConfig.map(function (optionConfig) { return new DynamicFormOption(optionConfig); });
                        _this._options = options;
                        return options;
                    }));
                }
                else {
                    this.updateOptions$();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} optionConfig
         * @return {?}
         */
        DynamicOptionControlModel.prototype.add = /**
         * @param {?} optionConfig
         * @return {?}
         */
        function (optionConfig) {
            return this.insert(this.options.length, optionConfig);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicOptionControlModel.prototype.get = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return this.options[index];
        };
        /**
         * @param {?} index
         * @param {?} optionConfig
         * @return {?}
         */
        DynamicOptionControlModel.prototype.insert = /**
         * @param {?} index
         * @param {?} optionConfig
         * @return {?}
         */
        function (index, optionConfig) {
            /** @type {?} */
            var option = new DynamicFormOption(optionConfig);
            this.options.splice(index, 0, option);
            this.updateOptions$();
            return option;
        };
        /**
         * @param {...?} indices
         * @return {?}
         */
        DynamicOptionControlModel.prototype.remove = /**
         * @param {...?} indices
         * @return {?}
         */
        function () {
            var _this = this;
            var indices = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                indices[_i] = arguments[_i];
            }
            indices.forEach(function (index) { return _this.options.splice(index, 1); });
            this.updateOptions$();
        };
        __decorate$a([
            serializable("options"),
            __metadata$a("design:type", Array)
        ], DynamicOptionControlModel.prototype, "_options", void 0);
        return DynamicOptionControlModel;
    }(DynamicFormValueControlModel));

    var __extends$c = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$b = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$b = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_GROUP = "GROUP";
    var DynamicFormGroupModel = /** @class */ (function (_super) {
        __extends$c(DynamicFormGroupModel, _super);
        function DynamicFormGroupModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.group = [];
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_GROUP;
            _this.group = Array.isArray(config.group) ? config.group : [];
            _this.legend = config.legend || null;
            return _this;
        }
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormGroupModel.prototype.get = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return this.group[index];
        };
        /**
         * @param {?} index
         * @param {?} controlModel
         * @return {?}
         */
        DynamicFormGroupModel.prototype.set = /**
         * @param {?} index
         * @param {?} controlModel
         * @return {?}
         */
        function (index, controlModel) {
            this.group[index] = controlModel;
        };
        /**
         * @param {?} controlModel
         * @return {?}
         */
        DynamicFormGroupModel.prototype.add = /**
         * @param {?} controlModel
         * @return {?}
         */
        function (controlModel) {
            this.group.push(controlModel);
        };
        /**
         * @param {?} index
         * @param {?} controlModel
         * @return {?}
         */
        DynamicFormGroupModel.prototype.insert = /**
         * @param {?} index
         * @param {?} controlModel
         * @return {?}
         */
        function (index, controlModel) {
            this.group.splice(index, 0, controlModel);
        };
        /**
         * @param {?} index
         * @param {?} step
         * @return {?}
         */
        DynamicFormGroupModel.prototype.move = /**
         * @param {?} index
         * @param {?} step
         * @return {?}
         */
        function (index, step) {
            var _a;
            (_a = this.group).splice.apply(_a, [index + step, 0].concat(this.group.splice(index, 1)));
        };
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicFormGroupModel.prototype.remove = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.group.splice(index, 1);
        };
        /**
         * @return {?}
         */
        DynamicFormGroupModel.prototype.size = /**
         * @return {?}
         */
        function () {
            return this.group.length;
        };
        __decorate$b([
            serializable(),
            __metadata$b("design:type", Array)
        ], DynamicFormGroupModel.prototype, "group", void 0);
        __decorate$b([
            serializable(),
            __metadata$b("design:type", Object)
        ], DynamicFormGroupModel.prototype, "legend", void 0);
        __decorate$b([
            serializable(),
            __metadata$b("design:type", String)
        ], DynamicFormGroupModel.prototype, "type", void 0);
        return DynamicFormGroupModel;
    }(DynamicFormControlModel));

    var __extends$d = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$c = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$c = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = "CHECKBOX_GROUP";
    var DynamicCheckboxGroupModel = /** @class */ (function (_super) {
        __extends$d(DynamicCheckboxGroupModel, _super);
        function DynamicCheckboxGroupModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;
            return _this;
        }
        /**
         * @param {...?} indices
         * @return {?}
         */
        DynamicCheckboxGroupModel.prototype.check = /**
         * @param {...?} indices
         * @return {?}
         */
        function () {
            var _this = this;
            var indices = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                indices[_i] = arguments[_i];
            }
            indices.forEach(function (index) { return _this.group[index].checked = true; });
        };
        /**
         * @param {...?} indices
         * @return {?}
         */
        DynamicCheckboxGroupModel.prototype.uncheck = /**
         * @param {...?} indices
         * @return {?}
         */
        function () {
            var _this = this;
            var indices = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                indices[_i] = arguments[_i];
            }
            indices.forEach(function (index) { return _this.group[index].checked = false; });
        };
        /**
         * @return {?}
         */
        DynamicCheckboxGroupModel.prototype.checkAll = /**
         * @return {?}
         */
        function () {
            this.group.forEach(function (model) { return model.checked = true; });
        };
        /**
         * @return {?}
         */
        DynamicCheckboxGroupModel.prototype.uncheckAll = /**
         * @return {?}
         */
        function () {
            this.group.forEach(function (model) { return model.checked = false; });
        };
        __decorate$c([
            serializable(),
            __metadata$c("design:type", Array)
        ], DynamicCheckboxGroupModel.prototype, "group", void 0);
        __decorate$c([
            serializable(),
            __metadata$c("design:type", String)
        ], DynamicCheckboxGroupModel.prototype, "type", void 0);
        return DynamicCheckboxGroupModel;
    }(DynamicFormGroupModel));

    var __extends$e = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$d = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$d = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = "COLORPICKER";
    var DynamicColorPickerModel = /** @class */ (function (_super) {
        __extends$e(DynamicColorPickerModel, _super);
        function DynamicColorPickerModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;
            _this.format = isString(config.format) ? config.format : null;
            _this.inline = isBoolean(config.inline) ? config.inline : false;
            return _this;
        }
        __decorate$d([
            serializable(),
            __metadata$d("design:type", Object)
        ], DynamicColorPickerModel.prototype, "format", void 0);
        __decorate$d([
            serializable(),
            __metadata$d("design:type", Boolean)
        ], DynamicColorPickerModel.prototype, "inline", void 0);
        __decorate$d([
            serializable(),
            __metadata$d("design:type", String)
        ], DynamicColorPickerModel.prototype, "type", void 0);
        return DynamicColorPickerModel;
    }(DynamicFormValueControlModel));

    var __extends$f = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$e = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$e = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = "DATEPICKER";
    var DynamicDatePickerModel = /** @class */ (function (_super) {
        __extends$f(DynamicDatePickerModel, _super);
        function DynamicDatePickerModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
            _this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
            _this.focusedDate = config.focusedDate || null;
            _this.inline = isBoolean(config.inline) ? config.inline : false;
            _this.prefix = config.prefix || null;
            _this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
            _this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;
            _this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;
            _this.suffix = config.suffix || null;
            return _this;
        }
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Boolean)
        ], DynamicDatePickerModel.prototype, "autoFocus", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Object)
        ], DynamicDatePickerModel.prototype, "focusedDate", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Boolean)
        ], DynamicDatePickerModel.prototype, "inline", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Object)
        ], DynamicDatePickerModel.prototype, "prefix", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Boolean)
        ], DynamicDatePickerModel.prototype, "readOnly", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Object)
        ], DynamicDatePickerModel.prototype, "suffix", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Object)
        ], DynamicDatePickerModel.prototype, "toggleIcon", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", Object)
        ], DynamicDatePickerModel.prototype, "toggleLabel", void 0);
        __decorate$e([
            serializable(),
            __metadata$e("design:type", String)
        ], DynamicDatePickerModel.prototype, "type", void 0);
        return DynamicDatePickerModel;
    }(DynamicDateControlModel));

    var __extends$g = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$f = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$f = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_EDITOR = "EDITOR";
    var DynamicEditorModel = /** @class */ (function (_super) {
        __extends$g(DynamicEditorModel, _super);
        function DynamicEditorModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;
            return _this;
        }
        __decorate$f([
            serializable(),
            __metadata$f("design:type", String)
        ], DynamicEditorModel.prototype, "type", void 0);
        return DynamicEditorModel;
    }(DynamicInputControlModel));

    var __extends$h = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$g = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$g = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = "FILE_UPLOAD";
    var DynamicFileUploadModel = /** @class */ (function (_super) {
        __extends$h(DynamicFileUploadModel, _super);
        function DynamicFileUploadModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;
            _this.accept = Array.isArray(config.accept) ? config.accept : null;
            _this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;
            _this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;
            _this.minSize = isNumber(config.minSize) ? config.minSize : null;
            _this.removeUrl = config.removeUrl || null;
            _this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;
            _this.url = config.url || null;
            return _this;
        }
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Object)
        ], DynamicFileUploadModel.prototype, "accept", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Boolean)
        ], DynamicFileUploadModel.prototype, "autoUpload", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Object)
        ], DynamicFileUploadModel.prototype, "maxSize", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Object)
        ], DynamicFileUploadModel.prototype, "minSize", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Object)
        ], DynamicFileUploadModel.prototype, "removeUrl", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Boolean)
        ], DynamicFileUploadModel.prototype, "showFileList", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", Object)
        ], DynamicFileUploadModel.prototype, "url", void 0);
        __decorate$g([
            serializable(),
            __metadata$g("design:type", String)
        ], DynamicFileUploadModel.prototype, "type", void 0);
        return DynamicFileUploadModel;
    }(DynamicFileControlModel));

    var __extends$i = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$h = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$h = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = "RADIO_GROUP";
    /**
     * @template T
     */
    var DynamicRadioGroupModel = /** @class */ (function (_super) {
        __extends$i(DynamicRadioGroupModel, _super);
        function DynamicRadioGroupModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;
            _this.legend = config.legend || null;
            return _this;
        }
        /**
         * @param {?} index
         * @return {?}
         */
        DynamicRadioGroupModel.prototype.select = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.valueUpdates.next(this.get(index).value);
        };
        __decorate$h([
            serializable(),
            __metadata$h("design:type", Object)
        ], DynamicRadioGroupModel.prototype, "legend", void 0);
        __decorate$h([
            serializable(),
            __metadata$h("design:type", String)
        ], DynamicRadioGroupModel.prototype, "type", void 0);
        return DynamicRadioGroupModel;
    }(DynamicOptionControlModel));

    var __extends$j = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$i = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$i = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_RATING = "RATING";
    var DynamicRatingModel = /** @class */ (function (_super) {
        __extends$j(DynamicRatingModel, _super);
        function DynamicRatingModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_RATING;
            _this.max = isNumber(config.max) ? config.max : 10;
            return _this;
        }
        __decorate$i([
            serializable(),
            __metadata$i("design:type", Object)
        ], DynamicRatingModel.prototype, "max", void 0);
        __decorate$i([
            serializable(),
            __metadata$i("design:type", String)
        ], DynamicRatingModel.prototype, "type", void 0);
        return DynamicRatingModel;
    }(DynamicFormValueControlModel));

    var __extends$k = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$j = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$j = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_SELECT = "SELECT";
    /**
     * @template T
     */
    var DynamicSelectModel = /** @class */ (function (_super) {
        __extends$k(DynamicSelectModel, _super);
        function DynamicSelectModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
            _this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : i0.…µlooseIdentical;
            _this.filterable = isBoolean(config.filterable) ? config.filterable : false;
            _this.multiple = isBoolean(config.multiple) ? config.multiple : false;
            _this.placeholder = config.placeholder || "";
            _this.prefix = config.prefix || null;
            _this.suffix = config.suffix || null;
            return _this;
        }
        /**
         * @param {...?} indices
         * @return {?}
         */
        DynamicSelectModel.prototype.select = /**
         * @param {...?} indices
         * @return {?}
         */
        function () {
            var _this = this;
            var indices = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                indices[_i] = arguments[_i];
            }
            /** @type {?} */
            var value = this.multiple ? indices.map(function (index) { return _this.get(index).value; }) : this.get(indices[0]).value;
            this.valueUpdates.next(value);
        };
        __decorate$j([
            serializable(),
            __metadata$j("design:type", Boolean)
        ], DynamicSelectModel.prototype, "filterable", void 0);
        __decorate$j([
            serializable(),
            __metadata$j("design:type", Boolean)
        ], DynamicSelectModel.prototype, "multiple", void 0);
        __decorate$j([
            serializable(),
            __metadata$j("design:type", String)
        ], DynamicSelectModel.prototype, "placeholder", void 0);
        __decorate$j([
            serializable(),
            __metadata$j("design:type", Object)
        ], DynamicSelectModel.prototype, "prefix", void 0);
        __decorate$j([
            serializable(),
            __metadata$j("design:type", Object)
        ], DynamicSelectModel.prototype, "suffix", void 0);
        __decorate$j([
            serializable(),
            __metadata$j("design:type", String)
        ], DynamicSelectModel.prototype, "type", void 0);
        return DynamicSelectModel;
    }(DynamicOptionControlModel));

    var __extends$l = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$k = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$k = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_SLIDER = "SLIDER";
    var DynamicSliderModel = /** @class */ (function (_super) {
        __extends$l(DynamicSliderModel, _super);
        function DynamicSliderModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;
            _this.max = isNumber(config.max) ? config.max : 10;
            _this.min = isNumber(config.min) ? config.min : 0;
            _this.step = isNumber(config.step) ? config.step : 1;
            _this.vertical = isBoolean(config.vertical) ? config.vertical : false;
            return _this;
        }
        __decorate$k([
            serializable(),
            __metadata$k("design:type", Object)
        ], DynamicSliderModel.prototype, "max", void 0);
        __decorate$k([
            serializable(),
            __metadata$k("design:type", Object)
        ], DynamicSliderModel.prototype, "min", void 0);
        __decorate$k([
            serializable(),
            __metadata$k("design:type", Object)
        ], DynamicSliderModel.prototype, "step", void 0);
        __decorate$k([
            serializable(),
            __metadata$k("design:type", Boolean)
        ], DynamicSliderModel.prototype, "vertical", void 0);
        __decorate$k([
            serializable(),
            __metadata$k("design:type", String)
        ], DynamicSliderModel.prototype, "type", void 0);
        return DynamicSliderModel;
    }(DynamicFormValueControlModel));

    var __extends$m = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$l = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$l = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_SWITCH = "SWITCH";
    var DynamicSwitchModel = /** @class */ (function (_super) {
        __extends$m(DynamicSwitchModel, _super);
        function DynamicSwitchModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;
            _this.offLabel = config.offLabel || null;
            _this.onLabel = config.onLabel || null;
            return _this;
        }
        __decorate$l([
            serializable(),
            __metadata$l("design:type", Object)
        ], DynamicSwitchModel.prototype, "offLabel", void 0);
        __decorate$l([
            serializable(),
            __metadata$l("design:type", Object)
        ], DynamicSwitchModel.prototype, "onLabel", void 0);
        __decorate$l([
            serializable(),
            __metadata$l("design:type", String)
        ], DynamicSwitchModel.prototype, "type", void 0);
        return DynamicSwitchModel;
    }(DynamicCheckControlModel));

    var __extends$n = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$m = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$m = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = "TEXTAREA";
    /** @type {?} */
    var DYNAMIC_FORM_TEXTAREA_WRAP_HARD = "hard";
    /** @type {?} */
    var DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = "soft";
    var DynamicTextAreaModel = /** @class */ (function (_super) {
        __extends$n(DynamicTextAreaModel, _super);
        function DynamicTextAreaModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;
            _this.cols = isNumber(config.cols) ? config.cols : 20;
            _this.rows = isNumber(config.rows) ? config.rows : 2;
            _this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;
            return _this;
        }
        __decorate$m([
            serializable(),
            __metadata$m("design:type", Number)
        ], DynamicTextAreaModel.prototype, "cols", void 0);
        __decorate$m([
            serializable(),
            __metadata$m("design:type", Number)
        ], DynamicTextAreaModel.prototype, "rows", void 0);
        __decorate$m([
            serializable(),
            __metadata$m("design:type", String)
        ], DynamicTextAreaModel.prototype, "wrap", void 0);
        __decorate$m([
            serializable(),
            __metadata$m("design:type", String)
        ], DynamicTextAreaModel.prototype, "type", void 0);
        return DynamicTextAreaModel;
    }(DynamicInputControlModel));

    var __extends$o = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __decorate$n = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$n = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = "TIMEPICKER";
    var DynamicTimePickerModel = /** @class */ (function (_super) {
        __extends$o(DynamicTimePickerModel, _super);
        function DynamicTimePickerModel(config, layout) {
            var _this = _super.call(this, config, layout) || this;
            _this.type = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;
            _this.meridian = isBoolean(config.meridian) ? config.meridian : false;
            _this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;
            return _this;
        }
        __decorate$n([
            serializable(),
            __metadata$n("design:type", Boolean)
        ], DynamicTimePickerModel.prototype, "meridian", void 0);
        __decorate$n([
            serializable(),
            __metadata$n("design:type", Boolean)
        ], DynamicTimePickerModel.prototype, "showSeconds", void 0);
        __decorate$n([
            serializable(),
            __metadata$n("design:type", String)
        ], DynamicTimePickerModel.prototype, "type", void 0);
        return DynamicTimePickerModel;
    }(DynamicDateControlModel));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DYNAMIC_VALIDATORS = new i0.InjectionToken("DYNAMIC_VALIDATORS");
    var DynamicFormValidationService = /** @class */ (function () {
        function DynamicFormValidationService(NG_VALIDATORS, NG_ASYNC_VALIDATORS, DYNAMIC_VALIDATORS) {
            this.NG_VALIDATORS = NG_VALIDATORS;
            this.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
            this.DYNAMIC_VALIDATORS = DYNAMIC_VALIDATORS;
        }
        /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @param {?=} validatorsToken
         * @return {?}
         */
        DynamicFormValidationService.prototype.getValidatorFn = /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @param {?=} validatorsToken
         * @return {?}
         */
        function (validatorName, validatorArgs, validatorsToken) {
            if (validatorArgs === void 0) { validatorArgs = null; }
            if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
            /** @type {?} */
            var validatorFn;
            if (i1.Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators
                validatorFn = ((/** @type {?} */ (i1.Validators)))[validatorName];
            }
            else { // Custom Validators
                if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {
                    validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);
                }
                else if (validatorsToken) {
                    validatorFn = validatorsToken.find(function (validatorFn) { return validatorFn.name === validatorName; });
                }
            }
            if (validatorFn === undefined) { // throw when no validator could be resolved
                throw new Error("validator \"" + validatorName + "\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS");
            }
            if (validatorArgs !== null) {
                return ((/** @type {?} */ (validatorFn)))(validatorArgs);
            }
            return (/** @type {?} */ (validatorFn));
        };
        /**
         * @param {?} validatorsConfig
         * @param {?=} validatorsToken
         * @return {?}
         */
        DynamicFormValidationService.prototype.getValidatorFns = /**
         * @param {?} validatorsConfig
         * @param {?=} validatorsToken
         * @return {?}
         */
        function (validatorsConfig, validatorsToken) {
            var _this = this;
            if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
            /** @type {?} */
            var validatorFns = [];
            if (isObject(validatorsConfig)) {
                validatorFns = Object.keys(validatorsConfig).map(function (validatorConfigKey) {
                    /** @type {?} */
                    var validatorConfigValue = ((/** @type {?} */ (validatorsConfig)))[validatorConfigKey];
                    if (_this.isValidatorDescriptor(validatorConfigValue)) {
                        /** @type {?} */
                        var descriptor = (/** @type {?} */ (validatorConfigValue));
                        return _this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);
                    }
                    return _this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);
                });
            }
            return validatorFns;
        };
        /**
         * @param {?} template
         * @param {?} model
         * @param {?=} error
         * @return {?}
         */
        DynamicFormValidationService.prototype.parseErrorMessageConfig = /**
         * @param {?} template
         * @param {?} model
         * @param {?=} error
         * @return {?}
         */
        function (template, model, error) {
            if (error === void 0) { error = null; }
            return template.replace(/{{\s*(.+?)\s*}}/mg, function (_match, expression) {
                /** @type {?} */
                var propertySource = model;
                /** @type {?} */
                var propertyName = expression;
                if (expression.indexOf("validator.") >= 0 && error) {
                    propertySource = error;
                    propertyName = expression.replace("validator.", "");
                }
                return propertySource[propertyName] ? propertySource[propertyName] : null;
            });
        };
        /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @return {?}
         */
        DynamicFormValidationService.prototype.getValidator = /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @return {?}
         */
        function (validatorName, validatorArgs) {
            if (validatorArgs === void 0) { validatorArgs = null; }
            return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs)));
        };
        /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @return {?}
         */
        DynamicFormValidationService.prototype.getAsyncValidator = /**
         * @param {?} validatorName
         * @param {?=} validatorArgs
         * @return {?}
         */
        function (validatorName, validatorArgs) {
            if (validatorArgs === void 0) { validatorArgs = null; }
            return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS)));
        };
        /**
         * @param {?} validatorsConfig
         * @return {?}
         */
        DynamicFormValidationService.prototype.getValidators = /**
         * @param {?} validatorsConfig
         * @return {?}
         */
        function (validatorsConfig) {
            return (/** @type {?} */ (this.getValidatorFns(validatorsConfig)));
        };
        /**
         * @param {?} asyncValidatorsConfig
         * @return {?}
         */
        DynamicFormValidationService.prototype.getAsyncValidators = /**
         * @param {?} asyncValidatorsConfig
         * @return {?}
         */
        function (asyncValidatorsConfig) {
            return (/** @type {?} */ (this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS)));
        };
        /**
         * @param {?} validatorsConfig
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        DynamicFormValidationService.prototype.updateValidators = /**
         * @param {?} validatorsConfig
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        function (validatorsConfig, control, model) {
            model.validators = validatorsConfig;
            if (validatorsConfig === null) {
                control.clearValidators();
            }
            else {
                control.setValidators(this.getValidators(validatorsConfig));
            }
        };
        /**
         * @param {?} asyncValidatorsConfig
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        DynamicFormValidationService.prototype.updateAsyncValidators = /**
         * @param {?} asyncValidatorsConfig
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        function (asyncValidatorsConfig, control, model) {
            model.asyncValidators = asyncValidatorsConfig;
            if (asyncValidatorsConfig === null) {
                control.clearAsyncValidators();
            }
            else {
                control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));
            }
        };
        /**
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        DynamicFormValidationService.prototype.createErrorMessages = /**
         * @param {?} control
         * @param {?} model
         * @return {?}
         */
        function (control, model) {
            var _this = this;
            /** @type {?} */
            var messages = [];
            if (model.hasErrorMessages) {
                /** @type {?} */
                var messagesConfig_1 = (/** @type {?} */ (model.errorMessages));
                Object.keys(control.errors || {}).forEach(function (validationErrorKey) {
                    /** @type {?} */
                    var messageKey = validationErrorKey;
                    if (validationErrorKey === "minlength" || validationErrorKey === "maxlength") {
                        messageKey = messageKey.replace("length", "Length");
                    }
                    if (messagesConfig_1.hasOwnProperty(messageKey)) {
                        /** @type {?} */
                        var validationError = control.getError(validationErrorKey);
                        /** @type {?} */
                        var messageTemplate = (/** @type {?} */ (messagesConfig_1[messageKey]));
                        messages.push(_this.parseErrorMessageConfig(messageTemplate, model, validationError));
                    }
                });
            }
            return messages;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DynamicFormValidationService.prototype.isFormHook = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return isString(value) && ["blur", "change", "submit"].indexOf(value) !== -1;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DynamicFormValidationService.prototype.isValidatorDescriptor = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isObject(value)) {
                return value.hasOwnProperty("name") && value.hasOwnProperty("args");
            }
            return false;
        };
        DynamicFormValidationService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: "root"
                    },] },
        ];
        /** @nocollapse */
        DynamicFormValidationService.ctorParameters = function () { return [
            { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i1.NG_VALIDATORS,] }] },
            { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i1.NG_ASYNC_VALIDATORS,] }] },
            { type: Map, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [DYNAMIC_VALIDATORS,] }] }
        ]; };
        /** @nocollapse */ DynamicFormValidationService.ngInjectableDef = i0.defineInjectable({ factory: function DynamicFormValidationService_Factory() { return new DynamicFormValidationService(i0.inject(i1.NG_VALIDATORS, 8), i0.inject(i1.NG_ASYNC_VALIDATORS, 8), i0.inject(DYNAMIC_VALIDATORS, 8)); }, token: DynamicFormValidationService, providedIn: "root" });
        return DynamicFormValidationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamicFormService = /** @class */ (function () {
        function DynamicFormService(validationService) {
            this.validationService = validationService;
        }
        /**
         * @param {?=} validatorsConfig
         * @param {?=} asyncValidatorsConfig
         * @param {?=} updateOn
         * @return {?}
         */
        DynamicFormService.prototype.createAbstractControlOptions = /**
         * @param {?=} validatorsConfig
         * @param {?=} asyncValidatorsConfig
         * @param {?=} updateOn
         * @return {?}
         */
        function (validatorsConfig, asyncValidatorsConfig, updateOn) {
            if (validatorsConfig === void 0) { validatorsConfig = null; }
            if (asyncValidatorsConfig === void 0) { asyncValidatorsConfig = null; }
            if (updateOn === void 0) { updateOn = null; }
            return {
                asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,
                validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,
                updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : "change"
            };
        };
        /**
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.createFormArray = /**
         * @param {?} formArrayModel
         * @return {?}
         */
        function (formArrayModel) {
            /** @type {?} */
            var controls = [];
            /** @type {?} */
            var options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators, formArrayModel.updateOn);
            for (var index = 0; index < formArrayModel.size; index++) {
                /** @type {?} */
                var groupModel = formArrayModel.get(index);
                /** @type {?} */
                var groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators, formArrayModel.groupAsyncValidators, formArrayModel.updateOn);
                controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));
            }
            return new i1.FormArray(controls, options);
        };
        /**
         * @param {?} formModel
         * @param {?=} options
         * @param {?=} parent
         * @return {?}
         */
        DynamicFormService.prototype.createFormGroup = /**
         * @param {?} formModel
         * @param {?=} options
         * @param {?=} parent
         * @return {?}
         */
        function (formModel, options, parent) {
            var _this = this;
            if (options === void 0) { options = null; }
            if (parent === void 0) { parent = null; }
            /** @type {?} */
            var controls = {};
            formModel.forEach(function (model) {
                model.parent = parent;
                switch (model.type) {
                    case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                        controls[model.id] = _this.createFormArray((/** @type {?} */ (model)));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                        /** @type {?} */
                        var groupModel = (/** @type {?} */ (model));
                        /** @type {?} */
                        var groupOptions = _this.createAbstractControlOptions(groupModel.validators, groupModel.asyncValidators, groupModel.updateOn);
                        controls[model.id] = _this.createFormGroup(groupModel.group, groupOptions, groupModel);
                        break;
                    default:
                        /** @type {?} */
                        var controlModel = (/** @type {?} */ (model));
                        /** @type {?} */
                        var controlState = { value: controlModel.value, disabled: controlModel.disabled };
                        /** @type {?} */
                        var controlOptions = _this.createAbstractControlOptions(controlModel.validators, controlModel.asyncValidators, controlModel.updateOn);
                        controls[model.id] = new i1.FormControl(controlState, controlOptions);
                }
            });
            return new i1.FormGroup(controls, options);
        };
        /**
         * @param {?} model
         * @return {?}
         */
        DynamicFormService.prototype.getPathSegment = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : ((/** @type {?} */ (model))).id;
        };
        /**
         * @param {?} model
         * @return {?}
         */
        DynamicFormService.prototype.getPath = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            /** @type {?} */
            var path = [this.getPathSegment(model)];
            /** @type {?} */
            var parent = model.parent;
            while (parent) {
                path.unshift(this.getPathSegment(parent));
                parent = parent.parent;
            }
            return path;
        };
        /**
         * @param {?} formGroup
         * @param {?} formModel
         * @param {...?} models
         * @return {?}
         */
        DynamicFormService.prototype.addFormGroupControl = /**
         * @param {?} formGroup
         * @param {?} formModel
         * @param {...?} models
         * @return {?}
         */
        function (formGroup, formModel) {
            var models = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                models[_i - 2] = arguments[_i];
            }
            if (formModel instanceof DynamicFormGroupModel) {
                this.insertFormGroupControl.apply(this, [formModel.size(), formGroup, formModel].concat(models));
            }
            else {
                /** @type {?} */
                var _formModel = (/** @type {?} */ (formModel));
                this.insertFormGroupControl.apply(this, [_formModel.length, formGroup, _formModel].concat(models));
            }
        };
        /**
         * @param {?} index
         * @param {?} step
         * @param {?} formModel
         * @return {?}
         */
        DynamicFormService.prototype.moveFormGroupControl = /**
         * @param {?} index
         * @param {?} step
         * @param {?} formModel
         * @return {?}
         */
        function (index, step, formModel) {
            if (formModel instanceof DynamicFormGroupModel) {
                formModel.move(index, step);
            }
            else {
                /** @type {?} */
                var _formModel = (/** @type {?} */ (formModel));
                _formModel.splice.apply(_formModel, [index + step, 0].concat(_formModel.splice(index, 1)));
            }
        };
        /**
         * @param {?} index
         * @param {?} formGroup
         * @param {?} formModel
         * @param {...?} models
         * @return {?}
         */
        DynamicFormService.prototype.insertFormGroupControl = /**
         * @param {?} index
         * @param {?} formGroup
         * @param {?} formModel
         * @param {...?} models
         * @return {?}
         */
        function (index, formGroup, formModel) {
            var models = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                models[_i - 3] = arguments[_i];
            }
            /** @type {?} */
            var parent = formModel instanceof DynamicFormGroupModel ? formModel : null;
            /** @type {?} */
            var controls = this.createFormGroup(models, null, parent).controls;
            Object.keys(controls).forEach(function (controlName, idx) {
                /** @type {?} */
                var controlModel = models[idx];
                if (formModel instanceof DynamicFormGroupModel) {
                    formModel.insert(index, controlModel);
                }
                else {
                    ((/** @type {?} */ (formModel))).splice(index, 0, controlModel);
                }
                formGroup.addControl(controlName, controls[controlName]);
            });
        };
        /**
         * @param {?} index
         * @param {?} formGroup
         * @param {?} formModel
         * @return {?}
         */
        DynamicFormService.prototype.removeFormGroupControl = /**
         * @param {?} index
         * @param {?} formGroup
         * @param {?} formModel
         * @return {?}
         */
        function (index, formGroup, formModel) {
            if (formModel instanceof DynamicFormGroupModel) {
                formGroup.removeControl(formModel.get(index).id);
                formModel.remove(index);
            }
            else {
                formGroup.removeControl(formModel[index].id);
                ((/** @type {?} */ (formModel))).splice(index, 1);
            }
        };
        /**
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.addFormArrayGroup = /**
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        function (formArray, formArrayModel) {
            /** @type {?} */
            var groupModel = formArrayModel.addGroup();
            formArray.push(this.createFormGroup(groupModel.group, null, groupModel));
        };
        /**
         * @param {?} index
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.insertFormArrayGroup = /**
         * @param {?} index
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        function (index, formArray, formArrayModel) {
            /** @type {?} */
            var groupModel = formArrayModel.insertGroup(index);
            formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));
        };
        /**
         * @param {?} index
         * @param {?} step
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.moveFormArrayGroup = /**
         * @param {?} index
         * @param {?} step
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        function (index, step, formArray, formArrayModel) {
            /** @type {?} */
            var newIndex = index + step;
            /** @type {?} */
            var moveUp = step >= 0;
            if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {
                /** @type {?} */
                var movingGroups_1 = [];
                for (var i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {
                    movingGroups_1.push(formArray.at(i));
                }
                movingGroups_1.forEach(function (formControl, idx) {
                    /** @type {?} */
                    var position;
                    if (moveUp) {
                        position = idx === 0 ? newIndex : index + idx - 1;
                    }
                    else {
                        position = idx === movingGroups_1.length - 1 ? newIndex : newIndex + idx + 1;
                    }
                    formArray.setControl(position, formControl);
                });
                formArrayModel.moveGroup(index, step);
            }
            else {
                throw new Error("form array group cannot be moved due to index or new index being out of bounds");
            }
        };
        /**
         * @param {?} index
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.removeFormArrayGroup = /**
         * @param {?} index
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        function (index, formArray, formArrayModel) {
            formArray.removeAt(index);
            formArrayModel.removeGroup(index);
        };
        /**
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        DynamicFormService.prototype.clearFormArray = /**
         * @param {?} formArray
         * @param {?} formArrayModel
         * @return {?}
         */
        function (formArray, formArrayModel) {
            while (formArray.length > 0) {
                this.removeFormArrayGroup(0, formArray, formArrayModel);
            }
        };
        /**
         * @param {?} id
         * @param {?} formModel
         * @return {?}
         */
        DynamicFormService.prototype.findById = /**
         * @param {?} id
         * @param {?} formModel
         * @return {?}
         */
        function (id, formModel) {
            /** @type {?} */
            var result = null;
            /** @type {?} */
            var findByIdFn = function (id, groupModel) {
                for (var _i = 0, groupModel_1 = groupModel; _i < groupModel_1.length; _i++) {
                    var controlModel = groupModel_1[_i];
                    if (controlModel.id === id) {
                        result = controlModel;
                        break;
                    }
                    if (controlModel instanceof DynamicFormGroupModel) {
                        findByIdFn(id, ((/** @type {?} */ (controlModel))).group);
                    }
                }
            };
            findByIdFn(id, formModel);
            return result;
        };
        /**
         * @param {?} json
         * @return {?}
         */
        DynamicFormService.prototype.fromJSON = /**
         * @param {?} json
         * @return {?}
         */
        function (json) {
            var _this = this;
            /** @type {?} */
            var formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json;
            /** @type {?} */
            var formModel = [];
            formModelJSON.forEach(function (model) {
                /** @type {?} */
                var layout = model.layout || null;
                switch (model.type) {
                    case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                        /** @type {?} */
                        var formArrayModel_1 = (/** @type {?} */ (model));
                        if (Array.isArray(formArrayModel_1.groups)) {
                            formArrayModel_1.groups.forEach(function (groupModel) {
                                groupModel.group = (/** @type {?} */ (_this.fromJSON(groupModel.group)));
                            });
                        }
                        formArrayModel_1.groupFactory = function () {
                            return _this.fromJSON(formArrayModel_1.groupPrototype);
                        };
                        formModel.push(new DynamicFormArrayModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                        formModel.push(new DynamicCheckboxModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                        model.group = (/** @type {?} */ (_this.fromJSON(model.group)));
                        formModel.push(new DynamicCheckboxGroupModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:
                        formModel.push(new DynamicColorPickerModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                        formModel.push(new DynamicDatePickerModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:
                        formModel.push(new DynamicEditorModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:
                        model.value = null;
                        formModel.push(new DynamicFileUploadModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                        model.group = _this.fromJSON(model.group);
                        formModel.push(new DynamicFormGroupModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                        /** @type {?} */
                        var inputModel = (/** @type {?} */ (model));
                        if (inputModel.mask !== null) {
                            inputModel.mask = maskFromString((/** @type {?} */ (inputModel.mask)));
                        }
                        formModel.push(new DynamicInputModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                        formModel.push(new DynamicRadioGroupModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_RATING:
                        formModel.push(new DynamicRatingModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                        formModel.push(new DynamicSelectModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
                        formModel.push(new DynamicSliderModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                        formModel.push(new DynamicSwitchModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                        formModel.push(new DynamicTextAreaModel(model, layout));
                        break;
                    case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
                        formModel.push(new DynamicTimePickerModel(model, layout));
                        break;
                    default:
                        throw new Error("unknown form control model type defined on JSON object with id \"" + model.id + "\"");
                }
            });
            return formModel;
        };
        DynamicFormService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: "root"
                    },] },
        ];
        /** @nocollapse */
        DynamicFormService.ctorParameters = function () { return [
            { type: DynamicFormValidationService }
        ]; };
        /** @nocollapse */ DynamicFormService.ngInjectableDef = i0.defineInjectable({ factory: function DynamicFormService_Factory() { return new DynamicFormService(i0.inject(DynamicFormValidationService)); }, token: DynamicFormService, providedIn: "root" });
        return DynamicFormService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DYNAMIC_FORM_CONTROL_MAP_FN = new i0.InjectionToken("DYNAMIC_FORM_CONTROL_MAP_FN");
    var DynamicFormLayoutService = /** @class */ (function () {
        function DynamicFormLayoutService(DYNAMIC_FORM_CONTROL_MAP_FN) {
            this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
            this.DYNAMIC_FORM_CONTROL_MAP_FN = (/** @type {?} */ (DYNAMIC_FORM_CONTROL_MAP_FN));
        }
        /**
         * @param {?} id
         * @param {?} formLayout
         * @return {?}
         */
        DynamicFormLayoutService.prototype.findById = /**
         * @param {?} id
         * @param {?} formLayout
         * @return {?}
         */
        function (id, formLayout) {
            if (isObject(formLayout)) {
                for (var _i = 0, _a = Object.keys(formLayout); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (key === id) {
                        return formLayout[key];
                    }
                }
            }
            return null;
        };
        /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        DynamicFormLayoutService.prototype.filterTemplatesByModel = /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        function (model, templates) {
            /** @type {?} */
            var filterCallback = function (template) {
                return template.modelId === model.id || template.modelType === model.type;
            };
            if (templates instanceof i0.QueryList) {
                return templates.filter(filterCallback);
            }
            else if (Array.isArray(templates)) {
                return templates.filter(filterCallback);
            }
            return [];
        };
        /**
         * @param {?} model
         * @param {?} templates
         * @param {?} alignment
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getAlignedTemplate = /**
         * @param {?} model
         * @param {?} templates
         * @param {?} alignment
         * @return {?}
         */
        function (model, templates, alignment) {
            return this.filterTemplatesByModel(model, templates)
                .find(function (template) { return template.as === null && template.align === alignment; });
        };
        /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
        /*
            getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
                return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
            }
            */
        /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getStartTemplate = /*
            getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
                return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
            }
            */
        /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        function (model, templates) {
            return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
        };
        /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getEndTemplate = /**
         * @param {?} model
         * @param {?} templates
         * @return {?}
         */
        function (model, templates) {
            return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
        };
        /**
         * @param {?} layout
         * @param {?} context
         * @param {?} place
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getClass = /**
         * @param {?} layout
         * @param {?} context
         * @param {?} place
         * @return {?}
         */
        function (layout, context, place) {
            if (layout !== null && layout.hasOwnProperty(context)) {
                /** @type {?} */
                var config = (/** @type {?} */ (layout[context]));
                if (config.hasOwnProperty(place)) {
                    return (/** @type {?} */ (config[place]));
                }
            }
            return "";
        };
        /**
         * @param {?} model
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getElementId = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            /** @type {?} */
            var id = model.id;
            /** @type {?} */
            var parent = model.parent;
            while (parent !== null) {
                if (parent instanceof DynamicFormArrayGroupModel) {
                    id = parent.context.id + "-" + parent.index + "-" + model.id;
                    break;
                }
                parent = parent.parent;
            }
            return id;
        };
        /**
         * @param {?} model
         * @return {?}
         */
        DynamicFormLayoutService.prototype.getCustomComponentType = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.DYNAMIC_FORM_CONTROL_MAP_FN) {
                return this.DYNAMIC_FORM_CONTROL_MAP_FN(model);
            }
            return null;
        };
        DynamicFormLayoutService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: "root"
                    },] },
        ];
        /** @nocollapse */
        DynamicFormLayoutService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: i0.Inject, args: [DYNAMIC_FORM_CONTROL_MAP_FN,] }, { type: i0.Optional }] }
        ]; };
        /** @nocollapse */ DynamicFormLayoutService.ngInjectableDef = i0.defineInjectable({ factory: function DynamicFormLayoutService_Factory() { return new DynamicFormLayoutService(i0.inject(DYNAMIC_FORM_CONTROL_MAP_FN, 8)); }, token: DynamicFormLayoutService, providedIn: "root" });
        return DynamicFormLayoutService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var DynamicFormsCoreModule = /** @class */ (function () {
        function DynamicFormsCoreModule() {
        }
        /**
         * @return {?}
         */
        DynamicFormsCoreModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: DynamicFormsCoreModule,
                providers: [
                    DynamicFormService,
                    DynamicFormLayoutService,
                    DynamicFormValidationService
                ]
            };
        };
        DynamicFormsCoreModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            i1.ReactiveFormsModule
                        ],
                        declarations: [
                            DynamicIdDirective,
                            DynamicListDirective,
                            DynamicTemplateDirective
                        ],
                        exports: [
                            DynamicIdDirective,
                            DynamicListDirective,
                            DynamicTemplateDirective
                        ]
                    },] },
        ];
        return DynamicFormsCoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.DynamicFormArrayComponent = DynamicFormArrayComponent;
    exports.DynamicFormComponent = DynamicFormComponent;
    exports.DynamicFormControlContainerComponent = DynamicFormControlContainerComponent;
    exports.isDynamicFormControlEvent = isDynamicFormControlEvent;
    exports.DynamicFormControlEventType = DynamicFormControlEventType;
    exports.DynamicFormControlComponent = DynamicFormControlComponent;
    exports.DynamicTemplateableFormControlComponent = DynamicTemplateableFormControlComponent;
    exports.serializable = serializable;
    exports.getSerializables = getSerializables;
    exports.serialize = serialize;
    exports.METADATA_KEY_SERIALIZABLE = METADATA_KEY_SERIALIZABLE;
    exports.DynamicIdDirective = DynamicIdDirective;
    exports.DynamicListDirective = DynamicListDirective;
    exports.DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT;
    exports.DynamicTemplateDirective = DynamicTemplateDirective;
    exports.DynamicFormControlModel = DynamicFormControlModel;
    exports.DynamicFormValueControlModel = DynamicFormValueControlModel;
    exports.DynamicCheckControlModel = DynamicCheckControlModel;
    exports.DynamicDateControlModel = DynamicDateControlModel;
    exports.DynamicFileControlModel = DynamicFileControlModel;
    exports.DynamicInputControlModel = DynamicInputControlModel;
    exports.DynamicFormOption = DynamicFormOption;
    exports.DynamicOptionControlModel = DynamicOptionControlModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
    exports.DynamicCheckboxModel = DynamicCheckboxModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;
    exports.DynamicCheckboxGroupModel = DynamicCheckboxGroupModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;
    exports.DynamicColorPickerModel = DynamicColorPickerModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
    exports.DynamicDatePickerModel = DynamicDatePickerModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_EDITOR = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;
    exports.DynamicEditorModel = DynamicEditorModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;
    exports.DynamicFileUploadModel = DynamicFileUploadModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_GROUP = DYNAMIC_FORM_CONTROL_TYPE_GROUP;
    exports.DynamicFormGroupModel = DynamicFormGroupModel;
    exports.DynamicFormArrayGroupModel = DynamicFormArrayGroupModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_ARRAY = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
    exports.DynamicFormArrayModel = DynamicFormArrayModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_INPUT = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL;
    exports.DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK;
    exports.DynamicInputModel = DynamicInputModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;
    exports.DynamicRadioGroupModel = DynamicRadioGroupModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_RATING = DYNAMIC_FORM_CONTROL_TYPE_RATING;
    exports.DynamicRatingModel = DynamicRatingModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_SELECT = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
    exports.DynamicSelectModel = DynamicSelectModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_SLIDER = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;
    exports.DynamicSliderModel = DynamicSliderModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_SWITCH = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;
    exports.DynamicSwitchModel = DynamicSwitchModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;
    exports.DYNAMIC_FORM_TEXTAREA_WRAP_HARD = DYNAMIC_FORM_TEXTAREA_WRAP_HARD;
    exports.DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;
    exports.DynamicTextAreaModel = DynamicTextAreaModel;
    exports.DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;
    exports.DynamicTimePickerModel = DynamicTimePickerModel;
    exports.DYNAMIC_FORM_CONTROL_ACTION_DISABLE = DYNAMIC_FORM_CONTROL_ACTION_DISABLE;
    exports.DYNAMIC_FORM_CONTROL_ACTION_ENABLE = DYNAMIC_FORM_CONTROL_ACTION_ENABLE;
    exports.DYNAMIC_FORM_CONTROL_ACTION_VISIBLE = DYNAMIC_FORM_CONTROL_ACTION_VISIBLE;
    exports.DYNAMIC_FORM_CONTROL_ACTION_HIDDEN = DYNAMIC_FORM_CONTROL_ACTION_HIDDEN;
    exports.DYNAMIC_FORM_CONTROL_CONNECTIVE_AND = DYNAMIC_FORM_CONTROL_CONNECTIVE_AND;
    exports.DYNAMIC_FORM_CONTROL_CONNECTIVE_OR = DYNAMIC_FORM_CONTROL_CONNECTIVE_OR;
    exports.DynamicFormService = DynamicFormService;
    exports.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
    exports.DynamicFormLayoutService = DynamicFormLayoutService;
    exports.DYNAMIC_VALIDATORS = DYNAMIC_VALIDATORS;
    exports.DynamicFormValidationService = DynamicFormValidationService;
    exports.isAddressToken = isAddressToken;
    exports.isContactField = isContactField;
    exports.isContactToken = isContactToken;
    exports.isField = isField;
    exports.isSectionToken = isSectionToken;
    exports.validate = validate;
    exports.AUTOCOMPLETE_OFF = AUTOCOMPLETE_OFF;
    exports.AUTOCOMPLETE_ON = AUTOCOMPLETE_ON;
    exports.AUTOFILL_TOKEN_BILLING = AUTOFILL_TOKEN_BILLING;
    exports.AUTOFILL_TOKEN_SHIPPING = AUTOFILL_TOKEN_SHIPPING;
    exports.AUTOFILL_TOKENS_ADDRESS = AUTOFILL_TOKENS_ADDRESS;
    exports.AUTOFILL_TOKEN_HOME = AUTOFILL_TOKEN_HOME;
    exports.AUTOFILL_TOKEN_WORK = AUTOFILL_TOKEN_WORK;
    exports.AUTOFILL_TOKEN_MOBILE = AUTOFILL_TOKEN_MOBILE;
    exports.AUTOFILL_TOKEN_FAX = AUTOFILL_TOKEN_FAX;
    exports.AUTOFILL_TOKEN_PAGER = AUTOFILL_TOKEN_PAGER;
    exports.AUTOFILL_TOKENS_CONTACT = AUTOFILL_TOKENS_CONTACT;
    exports.AUTOFILL_FIELD_STREET_ADDRESS = AUTOFILL_FIELD_STREET_ADDRESS;
    exports.AUTOFILL_FIELD_ADDRESS_LINE_1 = AUTOFILL_FIELD_ADDRESS_LINE_1;
    exports.AUTOFILL_FIELD_ADDRESS_LINE_2 = AUTOFILL_FIELD_ADDRESS_LINE_2;
    exports.AUTOFILL_FIELD_ADDRESS_LINE_3 = AUTOFILL_FIELD_ADDRESS_LINE_3;
    exports.AUTOFILL_FIELD_ADDRESS_LEVEL_4 = AUTOFILL_FIELD_ADDRESS_LEVEL_4;
    exports.AUTOFILL_FIELD_ADDRESS_LEVEL_3 = AUTOFILL_FIELD_ADDRESS_LEVEL_3;
    exports.AUTOFILL_FIELD_ADDRESS_LEVEL_2 = AUTOFILL_FIELD_ADDRESS_LEVEL_2;
    exports.AUTOFILL_FIELD_ADDRESS_LEVEL_1 = AUTOFILL_FIELD_ADDRESS_LEVEL_1;
    exports.AUTOFILL_FIELD_NAME = AUTOFILL_FIELD_NAME;
    exports.AUTOFILL_FIELD_HONORIFIC_PREFIX = AUTOFILL_FIELD_HONORIFIC_PREFIX;
    exports.AUTOFILL_FIELD_GIVEN_NAME = AUTOFILL_FIELD_GIVEN_NAME;
    exports.AUTOFILL_FIELD_ADDITIONAL_NAME = AUTOFILL_FIELD_ADDITIONAL_NAME;
    exports.AUTOFILL_FIELD_FAMILY_NAME = AUTOFILL_FIELD_FAMILY_NAME;
    exports.AUTOFILL_FIELD_HONORIFIC_SUFFIX = AUTOFILL_FIELD_HONORIFIC_SUFFIX;
    exports.AUTOFILL_FIELD_NICKNAME = AUTOFILL_FIELD_NICKNAME;
    exports.AUTOFILL_FIELD_USERNAME = AUTOFILL_FIELD_USERNAME;
    exports.AUTOFILL_FIELD_NEW_PASSWORD = AUTOFILL_FIELD_NEW_PASSWORD;
    exports.AUTOFILL_FIELD_CURRENT_PASSWORD = AUTOFILL_FIELD_CURRENT_PASSWORD;
    exports.AUTOFILL_FIELD_ORGANIZATION_TITLE = AUTOFILL_FIELD_ORGANIZATION_TITLE;
    exports.AUTOFILL_FIELD_ORGANIZATION = AUTOFILL_FIELD_ORGANIZATION;
    exports.AUTOFILL_FIELD_COUNTRY = AUTOFILL_FIELD_COUNTRY;
    exports.AUTOFILL_FIELD_COUNTRY_NAME = AUTOFILL_FIELD_COUNTRY_NAME;
    exports.AUTOFILL_FIELD_POSTAL_CODE = AUTOFILL_FIELD_POSTAL_CODE;
    exports.AUTOFILL_FIELD_CC_NAME = AUTOFILL_FIELD_CC_NAME;
    exports.AUTOFILL_FIELD_CC_GIVEN_NAME = AUTOFILL_FIELD_CC_GIVEN_NAME;
    exports.AUTOFILL_FIELD_CC_ADDITIONAL_NAME = AUTOFILL_FIELD_CC_ADDITIONAL_NAME;
    exports.AUTOFILL_FIELD_CC_FAMILY_NAME = AUTOFILL_FIELD_CC_FAMILY_NAME;
    exports.AUTOFILL_FIELD_CC_NUMBER = AUTOFILL_FIELD_CC_NUMBER;
    exports.AUTOFILL_FIELD_CC_EXP = AUTOFILL_FIELD_CC_EXP;
    exports.AUTOFILL_FIELD_CC_EXP_MONTH = AUTOFILL_FIELD_CC_EXP_MONTH;
    exports.AUTOFILL_FIELD_CC_EXP_YEAR = AUTOFILL_FIELD_CC_EXP_YEAR;
    exports.AUTOFILL_FIELD_CC_CSC = AUTOFILL_FIELD_CC_CSC;
    exports.AUTOFILL_FIELD_CC_TYPE = AUTOFILL_FIELD_CC_TYPE;
    exports.AUTOFILL_FIELD_TRANSACTION_CURRENCY = AUTOFILL_FIELD_TRANSACTION_CURRENCY;
    exports.AUTOFILL_FIELD_TRANSACTION_AMOUNT = AUTOFILL_FIELD_TRANSACTION_AMOUNT;
    exports.AUTOFILL_FIELD_LANGUAGE = AUTOFILL_FIELD_LANGUAGE;
    exports.AUTOFILL_FIELD_BDAY = AUTOFILL_FIELD_BDAY;
    exports.AUTOFILL_FIELD_BDAY_DAY = AUTOFILL_FIELD_BDAY_DAY;
    exports.AUTOFILL_FIELD_BDAY_MONTH = AUTOFILL_FIELD_BDAY_MONTH;
    exports.AUTOFILL_FIELD_BDAY_YEAR = AUTOFILL_FIELD_BDAY_YEAR;
    exports.AUTOFILL_FIELD_SEX = AUTOFILL_FIELD_SEX;
    exports.AUTOFILL_FIELD_URL = AUTOFILL_FIELD_URL;
    exports.AUTOFILL_FIELD_PHOTO = AUTOFILL_FIELD_PHOTO;
    exports.AUTOFILL_FIELDS = AUTOFILL_FIELDS;
    exports.AUTOFILL_FIELD_TEL = AUTOFILL_FIELD_TEL;
    exports.AUTOFILL_FIELD_TEL_COUNTRY_CODE = AUTOFILL_FIELD_TEL_COUNTRY_CODE;
    exports.AUTOFILL_FIELD_TEL_NATIONAL = AUTOFILL_FIELD_TEL_NATIONAL;
    exports.AUTOFILL_FIELD_TEL_AREA_CODE = AUTOFILL_FIELD_TEL_AREA_CODE;
    exports.AUTOFILL_FIELD_TEL_LOCAL = AUTOFILL_FIELD_TEL_LOCAL;
    exports.AUTOFILL_FIELD_TEL_LOCAL_PREFIX = AUTOFILL_FIELD_TEL_LOCAL_PREFIX;
    exports.AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = AUTOFILL_FIELD_TEL_LOCAL_SUFFIX;
    exports.AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = AUTOFILL_FIELD_TEL_LOCAL_EXTENSION;
    exports.AUTOFILL_FIELD_EMAIL = AUTOFILL_FIELD_EMAIL;
    exports.AUTOFILL_FIELD_IMPP = AUTOFILL_FIELD_IMPP;
    exports.AUTOFILL_FIELDS_CONTACT = AUTOFILL_FIELDS_CONTACT;
    exports.isBoolean = isBoolean;
    exports.isFunction = isFunction;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isString = isString;
    exports.maskToString = maskToString;
    exports.maskFromString = maskFromString;
    exports.parseReviver = parseReviver;
    exports.findActivationRelation = findActivationRelation;
    exports.getRelatedFormControls = getRelatedFormControls;
    exports.isFormControlToBeDisabled = isFormControlToBeDisabled;
    exports.DynamicFormsCoreModule = DynamicFormsCoreModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=core.umd.js.map
