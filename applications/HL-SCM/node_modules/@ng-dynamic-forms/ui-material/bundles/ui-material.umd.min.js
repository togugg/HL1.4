/*!
@ng-dynamic-forms/ui-material 7.0.1 2018-11-03 16:33 UTC
Copyright (c) 2016-2018, Udo Sch√∂fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@ng-dynamic-forms/core"),require("@angular/core"),require("@angular/forms"),require("@angular/material"),require("@angular/common"),require("angular2-text-mask")):"function"==typeof define&&define.amd?define(["exports","@ng-dynamic-forms/core","@angular/core","@angular/forms","@angular/material","@angular/common","angular2-text-mask"],t):t((e.ngDF=e.ngDF||{},e.ngDF.materialUI={}),e.ngDF.core,e.ng.core,e.ng.forms,e.ng.material,e.ng.common,e["angular2-text-mask"])}(this,function(e,n,p,t,o,r,a){"use strict";var i,l,m,c,u,s,d,y,g,f,h,O,v,_=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),C=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.layoutService=e,n.validationService=t,n}return _(e,o),Object.defineProperty(e.prototype,"characterCount",{get:function(){return this.matInput?this.matInput.value.length:null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"characterHint",{get:function(){return this.characterCount+" / "+this.model.maxLength},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"showCharacterHint",{get:function(){return!(!this.model.maxLength||!this.characterCount)},enumerable:!0,configurable:!0}),e}(n.DynamicFormControlComponent),E=this&&this.__extends||(l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),I=function(r){function e(e,t,n){var o=r.call(this,e,t)||this;return o.layoutService=e,o.validationService=t,o.RIPPLE_OPTIONS=n,o.blur=new p.EventEmitter,o.change=new p.EventEmitter,o.customEvent=new p.EventEmitter,o.focus=new p.EventEmitter,o}return E(e,r),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-checkbox",template:'<ng-container [formGroup]="group">\n\n    <mat-checkbox #matCheckbox\n                  [checked]="model.checked"\n                  [color]="model.getAdditional(\'color\', \'accent\')"\n                  [disableRipple]="model.getAdditional(\'disableRipple\', RIPPLE_OPTIONS && RIPPLE_OPTIONS[\'disabled\'] || false)"\n                  [formControlName]="model.id"\n                  [id]="elementId"\n                  [indeterminate]="model.indeterminate"\n                  [labelPosition]="model.labelPosition || \'after\'"\n                  [name]="model.name"\n                  [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]"\n                  (blur)="onBlur($event)"\n                  (change)="onChange($event)"\n                  (focus)="onFocus($event)"\n                  (indeterminateChange)="onCustomEvent($event, \'indeterminateChange\')">\n\n        <span [ngClass]="getClass(\'element\', \'label\')" [innerHTML]="model.label"></span>\n\n    </mat-checkbox>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_RIPPLE_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matCheckbox:[{type:p.ViewChild,args:["matCheckbox"]}]},e}(n.DynamicFormControlComponent),P=this&&this.__extends||(m=function(e,t){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),b=function(l){function e(e,t,n,o,r,a){var i=l.call(this,e,t)||this;return i.layoutService=e,i.validationService=t,i.AUTOCOMPLETE_OPTIONS=n,i.CHIPS_OPTIONS=o,i.LABEL_OPTIONS=r,i.RIPPLE_OPTIONS=a,i.blur=new p.EventEmitter,i.change=new p.EventEmitter,i.customEvent=new p.EventEmitter,i.focus=new p.EventEmitter,i}return P(e,l),Object.defineProperty(e.prototype,"chips",{get:function(){return Array.isArray(this.model.value)?this.model.value:[]},enumerable:!0,configurable:!0}),e.prototype.onChipInputTokenEnd=function(e){var t=e.input,n=e.value.trim();0<n.length&&this.control.patchValue(this.chips.concat([n])),t instanceof HTMLInputElement&&(t.value="")},e.prototype.onChipSelected=function(e){var t=e.option.value;this.chips.includes(t)||this.control.patchValue(this.chips.concat([t]))},e.prototype.onChipRemoved=function(e,t){var n=this.chips;n[t]===e&&(n.splice(t,1),this.control.patchValue(n.slice()))},e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-chips",template:'<mat-form-field [appearance]="model.getAdditional(\'appearance\', \'legacy\')"\n                [color]="model.getAdditional(\'color\', \'primary\')"\n                [floatLabel]="model.getAdditional(\'floatLabel\', LABEL_OPTIONS && LABEL_OPTIONS[\'float\'] || \'auto\')"\n                [formGroup]="group"\n                [hideRequiredMarker]="model.getAdditional(\'hideRequiredMarker\', false)"\n                [ngClass]="getClass(\'grid\', \'control\')">\n\n    <mat-chip-list #matChipList [formControlName]="model.id" [id]="elementId" [multiple]="true">\n\n        <mat-chip *ngFor="let chip of chips; let index = index"\n                  [selectable]="false"\n                  (removed)="onChipRemoved(chip, index)">\n\n            <span>{{ chip }}</span>\n\n            <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n\n        <input matInput\n               [matAutocomplete]="matAutocomplete"\n               [matChipInputAddOnBlur]="model.getAdditional(\'matChipInputAddOnBlur\', true)"\n               [matChipInputFor]="matChipList"\n               [matChipInputSeparatorKeyCodes]="model.getAdditional(\'matChipInputSeparatorKeyCodes\', CHIPS_OPTIONS[\'separatorKeyCodes\'])"\n               [placeholder]="model.placeholder"\n               (matChipInputTokenEnd)="onChipInputTokenEnd($event)"/>\n\n        <mat-autocomplete #matAutocomplete="matAutocomplete"\n                          [autoActiveFirstOption]="model.getAdditional(\'autoActiveFirstOption\', AUTOCOMPLETE_OPTIONS[\'autoActiveFirstOption\'])"\n                          [disableRipple]="model.getAdditional(\'disableRipple\', RIPPLE_OPTIONS && RIPPLE_OPTIONS[\'disabled\'] || false)"\n                          [displayWith]="model.getAdditional(\'displayWith\', null)"\n                          (optionSelected)="onChipSelected($event)">\n\n            <mat-option *ngFor="let option of model.list$ | async" [value]="option">{{ option }}</mat-option>\n\n        </mat-autocomplete>\n\n    </mat-chip-list>\n\n</mat-form-field>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_CHIPS_DEFAULT_OPTIONS]}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_LABEL_GLOBAL_OPTIONS]},{type:p.Optional}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_RIPPLE_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matAutocomplete:[{type:p.ViewChild,args:["matAutocomplete"]}],matChipList:[{type:p.ViewChild,args:["matChipList"]}],matInput:[{type:p.ViewChild,args:[o.MatInput]}]},e}(n.DynamicFormControlComponent),A=this&&this.__extends||(c=function(e,t){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),L=function(r){function e(e,t,n){var o=r.call(this,e,t)||this;return o.layoutService=e,o.validationService=t,o.LABEL_OPTIONS=n,o.blur=new p.EventEmitter,o.change=new p.EventEmitter,o.customEvent=new p.EventEmitter,o.focus=new p.EventEmitter,o}return A(e,r),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-datepicker",template:'<mat-form-field [appearance]="model.getAdditional(\'appearance\', \'legacy\')"\n                [color]="model.getAdditional(\'color\', \'primary\')"\n                [floatLabel]="model.getAdditional(\'floatLabel\', LABEL_OPTIONS && LABEL_OPTIONS[\'float\'] || \'auto\')"\n                [formGroup]="group"\n                [hideRequiredMarker]="model.getAdditional(\'hideRequiredMarker\', false)"\n                [ngClass]="getClass(\'grid\', \'control\')">\n\n    <ng-container *ngIf="model.label" ngProjectAs="mat-label">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf="model.prefix" matPrefix [innerHTML]="model.prefix"></span>\n\n    <input matInput\n           [autofocus]="model.autoFocus"\n           [formControlName]="model.id"\n           [id]="elementId"\n           [max]="model.max"\n           [matDatepicker]="matDatepicker"\n           [min]="model.min"\n           [name]="model.name"\n           [ngClass]="getClass(\'element\', \'control\')"\n           [placeholder]="model.placeholder"\n           [readonly]="model.readOnly"\n           [required]="model.required"\n           (blur)="onBlur($event)"\n           (dateChange)="onChange($event)"\n           (dateInput)="onCustomEvent($event, \'dateInput\')"\n           (focus)="onFocus($event)"/>\n\n    <span *ngIf="model.suffix" matSuffix [innerHTML]="model.suffix"></span>\n\n    <mat-hint *ngIf="model.hint !== null" align="start" [innerHTML]="model.hint"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]="matDatepicker"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]="model.getAdditional(\'opened\', false)"\n                    [startAt]="model.focusedDate"\n                    [startView]="model.getAdditional(\'startView\', \'month\')"\n                    [touchUi]="model.getAdditional(\'touchUi\', false)"\n                    (closed)="onCustomEvent($event, \'closed\')"\n                    (monthSelected)="onCustomEvent($event, \'monthSelected\')"\n                    (opened)="onCustomEvent($event, \'opened\')"\n                    (yearSelected)="onCustomEvent($event, \'yearSelected\')"></mat-datepicker>\n\n    <mat-error *ngFor="let message of errorMessages">{{ message }}</mat-error>\n\n</mat-form-field>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_LABEL_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matDatePicker:[{type:p.ViewChild,args:["matDatepicker"]}],matInput:[{type:p.ViewChild,args:[o.MatInput]}]},e}(n.DynamicFormControlComponent),T=this&&this.__extends||(u=function(e,t){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}u(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),M=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.layoutService=e,n.validationService=t,n.blur=new p.EventEmitter,n.change=new p.EventEmitter,n.customEvent=new p.EventEmitter,n.focus=new p.EventEmitter,n}return T(e,o),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-form-array",template:'<ng-container [formGroup]="group">\n\n    <div [formArrayName]="model.id" [id]="elementId" [ngClass]="getClass(\'element\', \'control\')">\n\n        <div *ngFor="let groupModel of model.groups; let idx = index" role="group"\n             [formGroupName]="idx" [ngClass]="[getClass(\'element\', \'group\'), getClass(\'grid\', \'group\')]">\n\n            <ng-container *ngTemplateOutlet="startTemplate?.templateRef; context: groupModel"></ng-container>\n\n            <dynamic-material-form-control *ngFor="let _model of groupModel.group"\n                                           [context]="groupModel"\n                                           [group]="control.at(idx)"\n                                           [hidden]="_model.hidden"\n                                           [layout]="layout"\n                                           [model]="_model"\n                                           [templates]="templates"\n                                           [ngClass]="[getClass(\'element\', \'host\', _model), getClass(\'grid\', \'host\', _model),\n                                                       getClass(\'element\',\'children\'), getClass(\'grid\',\'children\')]"\n                                           (blur)="onBlur($event)"\n                                           (change)="onChange($event)"\n                                           (focus)="onFocus($event)"\n                                           (matEvent)="onCustomEvent($event, null, true)"></dynamic-material-form-control>\n\n            <ng-container *ngTemplateOutlet="endTemplate?.templateRef; context: groupModel"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],templates:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}]},e}(n.DynamicFormArrayComponent),S=this&&this.__extends||(s=function(e,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),F=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.layoutService=e,n.validationService=t,n.blur=new p.EventEmitter,n.change=new p.EventEmitter,n.customEvent=new p.EventEmitter,n.focus=new p.EventEmitter,n}return S(e,o),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-form-group",template:'<ng-container [formGroup]="group">\n\n    <div role="group"\n         [formGroupName]="model.id"\n         [id]="elementId"\n         [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]">\n\n        <dynamic-material-form-control *ngFor="let _model of model.group"\n                                       [group]="control"\n                                       [hidden]="_model.hidden"\n                                       [layout]="layout"\n                                       [model]="_model"\n                                       [templates]="templates"\n                                       [ngClass]="[getClass(\'element\', \'host\', _model), getClass(\'grid\', \'host\', _model),\n                                                   getClass(\'element\',\'children\'), getClass(\'grid\',\'children\')]"\n                                       (blur)="onBlur($event)"\n                                       (change)="onChange($event)"\n                                       (focus)="onFocus($event)"\n                                       (matEvent)="onCustomEvent($event, null, true)"></dynamic-material-form-control>\n    </div>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],templates:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}]},e}(n.DynamicFormControlComponent),w=this&&this.__extends||(d=function(e,t){return(d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}d(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),D=function(l){function e(e,t,n,o,r,a){var i=l.call(this,e,t)||this;return i.layoutService=e,i.validationService=t,i.errorStateMatcher=n,i.AUTOCOMPLETE_OPTIONS=o,i.LABEL_OPTIONS=r,i.RIPPLE_OPTIONS=a,i.blur=new p.EventEmitter,i.change=new p.EventEmitter,i.customEvent=new p.EventEmitter,i.focus=new p.EventEmitter,i}return w(e,l),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-input",template:'<mat-form-field [appearance]="model.getAdditional(\'appearance\', \'legacy\')"\n                [color]="model.getAdditional(\'color\', \'primary\')"\n                [floatLabel]="model.getAdditional(\'floatLabel\', LABEL_OPTIONS && LABEL_OPTIONS[\'float\'] || \'auto\')"\n                [formGroup]="group"\n                [hideRequiredMarker]="model.getAdditional(\'hideRequiredMarker\', false)"\n                [ngClass]="getClass(\'grid\',\'control\')"\n                [textMask]="{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}">\n\n    <ng-container *ngIf="model.label" ngProjectAs="mat-label">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf="model.prefix" matPrefix [innerHTML]="model.prefix"></span>\n\n    <input matInput\n           [attr.accept]="model.accept"\n           [attr.max]="model.max"\n           [attr.min]="model.min"\n           [attr.multiple]="model.multiple"\n           [attr.step]="model.step"\n           [autocomplete]="model.autoComplete"\n           [autofocus]="model.autoFocus"\n           [errorStateMatcher]="model.getAdditional(\'errorStateMatcher\', errorStateMatcher)"\n           [formControlName]="model.id"\n           [id]="elementId"\n           [maxlength]="model.maxLength"\n           [matAutocomplete]="matAutocomplete"\n           [minlength]="model.minLength"\n           [name]="model.name"\n           [ngClass]="getClass(\'element\', \'control\')"\n           [pattern]="model.pattern"\n           [placeholder]="model.placeholder"\n           [readonly]="model.readOnly"\n           [required]="model.required"\n           [spellcheck]="model.spellCheck"\n           [tabindex]="model.tabIndex"\n           [type]="model.inputType"\n           (blur)="onBlur($event)"\n           (change)="onChange($event)"\n           (focus)="onFocus($event)"/>\n\n    <span *ngIf="model.suffix" matSuffix [innerHTML]="model.suffix"></span>\n\n    <mat-hint *ngIf="model.hint !== null" align="start" [innerHTML]="model.hint"></mat-hint>\n\n    <mat-hint *ngIf="showCharacterHint" align="end">{{ characterHint }}</mat-hint>\n\n    <mat-error *ngFor="let message of errorMessages">{{ message }}</mat-error>\n\n</mat-form-field>\n\n<mat-autocomplete #matAutocomplete="matAutocomplete"\n                  [autoActiveFirstOption]="model.getAdditional(\'autoActiveFirstOption\', AUTOCOMPLETE_OPTIONS[\'autoActiveFirstOption\'])"\n                  [disableRipple]="model.getAdditional(\'disableRipple\', RIPPLE_OPTIONS && RIPPLE_OPTIONS[\'disabled\'] || false)"\n                  [displayWith]="model.getAdditional(\'displayWith\', null)"\n                  (optionSelected)="onChange($event)">\n\n    <mat-option *ngFor="let option of model.list$ | async" [value]="option">{{ option }}</mat-option>\n\n</mat-autocomplete>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:o.ErrorStateMatcher,decorators:[{type:p.Inject,args:[o.ErrorStateMatcher]}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_LABEL_GLOBAL_OPTIONS]},{type:p.Optional}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_RIPPLE_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matAutocomplete:[{type:p.ViewChild,args:["matAutocomplete"]}],matInput:[{type:p.ViewChild,args:[o.MatInput]}]},e}(C),R=this&&this.__extends||(y=function(e,t){return(y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),N=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.layoutService=e,n.validationService=t,n.blur=new p.EventEmitter,n.change=new p.EventEmitter,n.customEvent=new p.EventEmitter,n.focus=new p.EventEmitter,n}return R(e,o),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-radio-group",template:'<ng-container [formGroup]="group">\n\n    <mat-radio-group #matRadioGroup\n                     [formControlName]="model.id"\n                     [id]="elementId"\n                     [labelPosition]="model.getAdditional(\'labelPosition\', \'after\')"\n                     [name]="model.name"\n                     [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]"\n                     (blur)="onBlur($event)"\n                     (change)="onChange($event)"\n                     (focus)="onFocus($event)">\n\n        <mat-radio-button *ngFor="let option of model.options$ | async"\n                          [name]="model.name"\n                          [ngClass]="getClass(\'element\', \'option\')"\n                          [value]="option.value"><span [innerHTML]="option.label"></span></mat-radio-button>\n\n    </mat-radio-group>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matRadioGroup:[{type:p.ViewChild,args:["matRadioGroup"]}]},e}(n.DynamicFormControlComponent),x=this&&this.__extends||(g=function(e,t){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}g(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),k=function(i){function e(e,t,n,o,r){var a=i.call(this,e,t)||this;return a.layoutService=e,a.validationService=t,a.errorStateMatcher=n,a.LABEL_OPTIONS=o,a.RIPPLE_OPTIONS=r,a.blur=new p.EventEmitter,a.change=new p.EventEmitter,a.customEvent=new p.EventEmitter,a.focus=new p.EventEmitter,a}return x(e,i),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-select",template:'<mat-form-field [appearance]="model.getAdditional(\'appearance\', \'legacy\')"\n                [color]="model.getAdditional(\'color\', \'primary\')"\n                [ngClass]="getClass(\'grid\', \'control\')"\n                [floatLabel]="model.getAdditional(\'floatLabel\', LABEL_OPTIONS && LABEL_OPTIONS[\'float\'] || \'auto\')"\n                [formGroup]="group">\n\n    <ng-container *ngIf="model.label" ngProjectAs="mat-label">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf="model.prefix" matPrefix [innerHTML]="model.prefix"></span>\n\n    <mat-select #matSelect\n                [compareWith]="model.compareWithFn"\n                [disableOptionCentering]="model.getAdditional(\'disableOptionCentering\', false)"\n                [disableRipple]="model.getAdditional(\'disableRipple\', RIPPLE_OPTIONS && RIPPLE_OPTIONS[\'disabled\'] || false)"\n                [errorStateMatcher]="model.getAdditional(\'errorStateMatcher\', errorStateMatcher)"\n                [formControlName]="model.id"\n                [id]="elementId"\n                [multiple]="model.multiple"\n                [ngClass]="getClass(\'element\', \'control\')"\n                [placeholder]="model.placeholder"\n                [required]="model.required"\n                (openedChange)="onCustomEvent($event, \'openedChange\')"\n                (selectionChange)="onChange($event)">\n\n        <mat-option *ngFor="let option of model.options$ | async"\n                    [disabled]="option.disabled"\n                    [ngClass]="getClass(\'element\', \'option\')"\n                    [value]="option.value"><span [innerHTML]="option.label"></span></mat-option>\n    </mat-select>\n\n    <span *ngIf="model.suffix" matSuffix [innerHTML]="model.suffix"></span>\n\n    <mat-hint *ngIf="model.hint !== null" align="start" [innerHTML]="model.hint"></mat-hint>\n\n    <mat-error *ngFor="let message of errorMessages">{{ message }}</mat-error>\n\n</mat-form-field>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:o.ErrorStateMatcher,decorators:[{type:p.Inject,args:[o.ErrorStateMatcher]}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_LABEL_GLOBAL_OPTIONS]},{type:p.Optional}]},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_RIPPLE_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matSelect:[{type:p.ViewChild,args:["matSelect"]}]},e}(n.DynamicFormControlComponent),j=this&&this.__extends||(f=function(e,t){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}f(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),$=function(r){function e(e,t,n){var o=r.call(this,e,t)||this;return o.layoutService=e,o.validationService=t,o.RIPPLE_OPTIONS=n,o.blur=new p.EventEmitter,o.change=new p.EventEmitter,o.customEvent=new p.EventEmitter,o.focus=new p.EventEmitter,o}return j(e,r),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-slide-toggle",template:'<ng-container [formGroup]="group">\n\n    <mat-slide-toggle #matSlideToggle\n                      [checked]="model.checked"\n                      [color]="model.getAdditional(\'color\', \'accent\')"\n                      [disableRipple]="model.getAdditional(\'disableRipple\', RIPPLE_OPTIONS && RIPPLE_OPTIONS[\'disabled\'] || false)"\n                      [formControlName]="model.id"\n                      [id]="elementId"\n                      [labelPosition]="model.labelPosition || \'after\'"\n                      [name]="model.name"\n                      [ngClass]="[getClass(\'element\',\'control\'), getClass(\'grid\',\'control\')]"\n                      (change)="onChange($event)"\n                      (dragChange)="onCustomEvent($event, \'dragChange\')"\n                      (toggleChange)="onCustomEvent($event, \'toggleChange\')">\n\n        <span *ngIf="!model.checked" [innerHTML]="model.offLabel"></span>\n\n        <span *ngIf="model.checked" [innerHTML]="model.onLabel"></span>\n\n    </mat-slide-toggle>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_RIPPLE_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matSlideToggle:[{type:p.ViewChild,args:["matSlideToggle"]}]},e}(n.DynamicFormControlComponent),B=this&&this.__extends||(h=function(e,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),V=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.layoutService=e,n.validationService=t,n.blur=new p.EventEmitter,n.change=new p.EventEmitter,n.customEvent=new p.EventEmitter,n.focus=new p.EventEmitter,n}return B(e,o),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-slider",template:'<ng-container [formGroup]="group">\n\n    <mat-slider #matSlider\n                [color]="model.getAdditional(\'color\', \'accent\')"\n                [formControlName]="model.id"\n                [id]="elementId"\n                [invert]="model.getAdditional(\'invert\', false)"\n                [min]="model.min"\n                [max]="model.max"\n                [ngClass]="[getClass(\'element\', \'control\'), getClass(\'grid\', \'control\')]"\n                [step]="model.step"\n                [tabIndex]="model.tabIndex"\n                [thumbLabel]="model.getAdditional(\'thumbLabel\', true)"\n                [tickInterval]="model.getAdditional(\'tickInterval\', 1)"\n                [vertical]="model.vertical"\n                (change)="onChange($event)"\n                (input)="onCustomEvent($event, \'input\')"></mat-slider>\n\n</ng-container>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matSlider:[{type:p.ViewChild,args:["matSlider"]}]},e}(n.DynamicFormControlComponent),G=this&&this.__extends||(O=function(e,t){return(O=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}O(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Y=function(r){function e(e,t,n){var o=r.call(this,e,t)||this;return o.layoutService=e,o.validationService=t,o.LABEL_OPTIONS=n,o.blur=new p.EventEmitter,o.change=new p.EventEmitter,o.customEvent=new p.EventEmitter,o.focus=new p.EventEmitter,o}return G(e,r),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-textarea",template:'<mat-form-field [appearance]="model.getAdditional(\'appearance\', \'legacy\')"\n                [color]="model.getAdditional(\'color\', \'primary\')"\n                [floatLabel]="model.getAdditional(\'floatLabel\', LABEL_OPTIONS && LABEL_OPTIONS[\'float\'] || \'auto\')"\n                [formGroup]="group"\n                [hideRequiredMarker]="model.getAdditional(\'hideRequiredMarker\', false)"\n                [ngClass]="getClass(\'grid\', \'control\')">\n\n    <ng-container *ngIf="model.label" ngProjectAs="mat-label">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <textarea matInput\n              [cdkTextareaAutosize]="model.getAdditional(\'cdkTextareaAutosize\', true)"\n              [cols]="model.cols"\n              [formControlName]="model.id"\n              [id]="elementId"\n              [maxlength]="model.maxLength"\n              [minlength]="model.minLength"\n              [name]="model.name"\n              [ngClass]="getClass(\'element\', \'control\')"\n              [placeholder]="model.placeholder"\n              [readonly]="model.readOnly"\n              [required]="model.required"\n              [rows]="model.rows"\n              [spellcheck]="model.spellCheck"\n              [tabindex]="model.tabIndex"\n              [wrap]="model.wrap"\n              (blur)="onBlur($event)"\n              (change)="onChange($event)"\n              (focus)="onFocus($event)"></textarea>\n\n    <mat-hint *ngIf="model.hint !== null" align="start" [innerHTML]="model.hint"></mat-hint>\n\n    <mat-hint *ngIf="showCharacterHint" align="end">{{ characterHint }}</mat-hint>\n\n    <mat-error *ngFor="let message of errorMessages">{{ message }}</mat-error>\n\n</mat-form-field>\n'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService},{type:void 0,decorators:[{type:p.Inject,args:[o.MAT_LABEL_GLOBAL_OPTIONS]},{type:p.Optional}]}]},e.propDecorators={group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],customEvent:[{type:p.Output}],focus:[{type:p.Output}],matInput:[{type:p.ViewChild,args:[o.MatInput]}]},e}(C),H=this&&this.__extends||(v=function(e,t){return(v=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}v(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),q=function(r){function e(e,t,n){var o=r.call(this,e,t,n)||this;return o.componentFactoryResolver=e,o.layoutService=t,o.validationService=n,o.context=null,o.blur=new p.EventEmitter,o.change=new p.EventEmitter,o.focus=new p.EventEmitter,o.customEvent=new p.EventEmitter,o}return H(e,r),Object.defineProperty(e.prototype,"componentType",{get:function(){return this.layoutService.getCustomComponentType(this.model)||U(this.model)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasMatFormField",{get:function(){var t=this;return[n.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,n.DYNAMIC_FORM_CONTROL_TYPE_INPUT,n.DYNAMIC_FORM_CONTROL_TYPE_SELECT,n.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA].some(function(e){return t.model.type===e})},enumerable:!0,configurable:!0}),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-form-control",template:'<div [formGroup]="group" [ngClass]="[getClass(\'element\', \'container\'), getClass(\'grid\', \'container\')]">\n\n    <label *ngIf="!hasMatFormField && !isCheckbox && hasLabel"\n           [for]="elementId"\n           [innerHTML]="model.label"\n           [ngClass]="[getClass(\'element\', \'label\'), getClass(\'grid\', \'label\')]"></label>\n\n    <ng-container *ngTemplateOutlet="startTemplate?.templateRef; context: model"></ng-container>\n\n    <ng-container #componentViewContainer></ng-container>\n\n    <ng-container *ngIf="!hasMatFormField">\n\n        <mat-error *ngFor="let message of errorMessages">{{ message }}</mat-error>\n\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet="endTemplate?.templateRef; context: model"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>\n'}]}],e.ctorParameters=function(){return[{type:p.ComponentFactoryResolver},{type:n.DynamicFormLayoutService},{type:n.DynamicFormValidationService}]},e.propDecorators={contentTemplateList:[{type:p.ContentChildren,args:[n.DynamicTemplateDirective]}],inputTemplateList:[{type:p.Input,args:["templates"]}],context:[{type:p.Input}],group:[{type:p.Input}],layout:[{type:p.Input}],model:[{type:p.Input}],blur:[{type:p.Output}],change:[{type:p.Output}],focus:[{type:p.Output}],customEvent:[{type:p.Output,args:["matEvent"]}],componentViewContainerRef:[{type:p.ViewChild,args:["componentViewContainer",{read:p.ViewContainerRef}]}]},e}(n.DynamicFormControlContainerComponent);function U(e){switch(e.type){case n.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:return M;case n.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:return I;case n.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:return F;case n.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:return L;case n.DYNAMIC_FORM_CONTROL_TYPE_GROUP:return F;case n.DYNAMIC_FORM_CONTROL_TYPE_INPUT:return e.multiple?b:D;case n.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:return N;case n.DYNAMIC_FORM_CONTROL_TYPE_SELECT:return k;case n.DYNAMIC_FORM_CONTROL_TYPE_SLIDER:return V;case n.DYNAMIC_FORM_CONTROL_TYPE_SWITCH:return $;case n.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:return Y;default:return null}}var K,W=this&&this.__extends||(K=function(e,t){return(K=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}K(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),X=function(o){function e(e,t){var n=o.call(this,e,t)||this;return n.formService=e,n.layoutService=t,n.blur=new p.EventEmitter,n.change=new p.EventEmitter,n.focus=new p.EventEmitter,n.customEvent=new p.EventEmitter,n}return W(e,o),e.decorators=[{type:p.Component,args:[{selector:"dynamic-material-form",template:'<dynamic-material-form-control *ngFor="let model of formModel; trackBy: trackByFn"\n                               [group]="formGroup"\n                               [hidden]="model.hidden"\n                               [layout]="formLayout"\n                               [model]="model"\n                               [ngClass]="[getClass(model, \'element\', \'host\'), getClass(model, \'grid\', \'host\')]"\n                               [templates]="templates"\n                               (blur)="onEvent($event, \'blur\')"\n                               (change)="onEvent($event, \'change\')"\n                               (focus)="onEvent($event, \'focus\')"\n                               (matEvent)="onEvent($event, \'custom\')"></dynamic-material-form-control>'}]}],e.ctorParameters=function(){return[{type:n.DynamicFormService},{type:n.DynamicFormLayoutService}]},e.propDecorators={formGroup:[{type:p.Input,args:["group"]}],formModel:[{type:p.Input,args:["model"]}],formLayout:[{type:p.Input,args:["layout"]}],blur:[{type:p.Output}],change:[{type:p.Output}],focus:[{type:p.Output}],customEvent:[{type:p.Output,args:["matEvent"]}],templates:[{type:p.ContentChildren,args:[n.DynamicTemplateDirective]}],components:[{type:p.ViewChildren,args:[q]}]},e}(n.DynamicFormComponent),z=function(){function e(){}return e.decorators=[{type:p.NgModule,args:[{imports:[r.CommonModule,t.ReactiveFormsModule,o.MatAutocompleteModule,o.MatCheckboxModule,o.MatChipsModule,o.MatDatepickerModule,o.MatIconModule,o.MatInputModule,o.MatRadioModule,o.MatSelectModule,o.MatSliderModule,o.MatSlideToggleModule,a.TextMaskModule,n.DynamicFormsCoreModule],declarations:[I,b,L,M,X,q,F,D,N,k,$,V,Y],entryComponents:[I,b,L,M,F,D,N,k,$,V,Y],exports:[n.DynamicFormsCoreModule,I,b,L,M,X,q,F,D,N,k,$,V,Y]}]}],e}();e.DynamicMaterialFormInputControlComponent=C,e.DynamicMaterialCheckboxComponent=I,e.DynamicMaterialChipsComponent=b,e.DynamicMaterialDatePickerComponent=L,e.DynamicMaterialFormArrayComponent=M,e.DynamicMaterialFormGroupComponent=F,e.DynamicMaterialInputComponent=D,e.DynamicMaterialRadioGroupComponent=N,e.DynamicMaterialSelectComponent=k,e.DynamicMaterialSlideToggleComponent=$,e.DynamicMaterialSliderComponent=V,e.DynamicMaterialTextAreaComponent=Y,e.DynamicMaterialFormComponent=X,e.materialUIFormControlMapFn=U,e.DynamicMaterialFormControlContainerComponent=q,e.DynamicFormsMaterialUIModule=z,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ui-material.umd.min.js.map
